{
  "name": "Shops",
  "icon": "ðŸ›’",
  "description": "The Shops module provides functions for creating and managing in-game shops and vendors that players can interact with.",
  "clientFunctions": [
    {
      "name": "OpenShop",
      "description": "Opens a shop interface with the specified items.",
      "syntax": "Bridge.Shops.OpenShop(shopName, items, shopConfig)",
      "parameters": [
        {
          "name": "shopName",
          "type": "string",
          "description": "Unique identifier for the shop"
        },
        {
          "name": "items",
          "type": "table",
          "description": "List of items available in the shop"
        },
        {
          "name": "shopConfig",
          "type": "table",
          "optional": true,
          "description": "Additional shop configuration options"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Open a basic shop with items\nBridge.Shops.OpenShop('generalstore', {\n    { name = 'water', price = 5, label = 'Water Bottle' },\n    { name = 'bread', price = 3, label = 'Bread' },\n    { name = 'phone', price = 250, label = 'Phone' }\n}, {\n    title = 'General Store',\n    type = 'buy'  -- Shop type (buy, sell, or both)\n})"
    },
    {
      "name": "CloseShop",
      "description": "Closes the currently open shop interface.",
      "syntax": "Bridge.Shops.CloseShop()",
      "parameters": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Close the current shop\nBridge.Shops.CloseShop()"
    },
    {
      "name": "IsShopOpen",
      "description": "Checks if a shop interface is currently open.",
      "syntax": "Bridge.Shops.IsShopOpen()",
      "parameters": [],
      "returns": [
        {
          "type": "boolean",
          "description": "true if a shop is open, false otherwise"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Check if shop is open before trying to open another\nif not Bridge.Shops.IsShopOpen() then\n    -- Open a shop\n    Bridge.Shops.OpenShop('weaponshop', weaponItems)\nelse\n    print('A shop is already open')\nend"
    }
  ],
  "serverFunctions": [
    {
      "name": "RegisterShop",
      "description": "Registers a shop configuration for server-side use.",
      "syntax": "Bridge.Shops.RegisterShop(shopName, config)",
      "parameters": [
        {
          "name": "shopName",
          "type": "string",
          "description": "Unique identifier for the shop"
        },
        {
          "name": "config",
          "type": "table",
          "description": "Shop configuration including items, locations, and settings"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Success status of registration"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Register a clothing shop\nBridge.Shops.RegisterShop('clothing_shop', {\n    name = 'Clothing Store',\n    type = 'clothing',\n    locations = {\n        vector3(72.3, -1399.1, 29.4),\n        vector3(-708.7, -152.1, 37.4)\n    },\n    blip = {\n        sprite = 73,\n        color = 47,\n        scale = 0.65\n    },\n    items = {} -- No items for clothing shop\n})"
    },
    {
      "name": "BuyItem",
      "description": "Handles a player purchasing an item from a shop.",
      "syntax": "Bridge.Shops.BuyItem(source, shopName, itemName, amount)",
      "parameters": [
        {
          "name": "source",
          "type": "number",
          "description": "Player server ID"
        },
        {
          "name": "shopName",
          "type": "string",
          "description": "Shop identifier"
        },
        {
          "name": "itemName",
          "type": "string",
          "description": "Name of the item to purchase"
        },
        {
          "name": "amount",
          "type": "number",
          "description": "Quantity to purchase"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Success status of the purchase"
        },
        {
          "type": "string",
          "description": "Error message if purchase failed"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Handle purchase request from client\nRegisterServerEvent('shop:buyItem')\nAddEventHandler('shop:buyItem', function(shopName, itemName, amount)\n    local source = source\n    local success, message = Bridge.Shops.BuyItem(source, shopName, itemName, amount)\n    \n    if success then\n        TriggerClientEvent('shop:purchaseSuccessful', source)\n    else\n        TriggerClientEvent('shop:purchaseFailed', source, message)\n    end\nend)"
    },
    {
      "name": "SellItem",
      "description": "Handles a player selling an item to a shop.",
      "syntax": "Bridge.Shops.SellItem(source, shopName, itemName, amount)",
      "parameters": [
        {
          "name": "source",
          "type": "number",
          "description": "Player server ID"
        },
        {
          "name": "shopName",
          "type": "string",
          "description": "Shop identifier"
        },
        {
          "name": "itemName",
          "type": "string",
          "description": "Name of the item to sell"
        },
        {
          "name": "amount",
          "type": "number",
          "description": "Quantity to sell"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Success status of the sale"
        },
        {
          "type": "string",
          "description": "Error message if sale failed"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Handle sell request from client\nRegisterServerEvent('shop:sellItem')\nAddEventHandler('shop:sellItem', function(shopName, itemName, amount)\n    local source = source\n    local success, message = Bridge.Shops.SellItem(source, shopName, itemName, amount)\n    \n    if success then\n        TriggerClientEvent('shop:sellSuccessful', source)\n    else\n        TriggerClientEvent('shop:sellFailed', source, message)\n    end\nend)"
    }
  ]
}
