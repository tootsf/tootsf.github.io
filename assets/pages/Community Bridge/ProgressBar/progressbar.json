{
  "name": "ProgressBar",
  "icon": "‚è≥",
  "description": "The ProgressBar module provides a unified interface for displaying progress bars during various actions. It supports different progress bar systems and styles.",
  "clientFunctions": [
    {
      "name": "Open",
      "description": "Opens a progress bar with specified options. Supports both bar and circle styles.",
      "syntax": "Bridge.ProgressBar.Open(options, callback, isQBFormat)",
      "parameters": [
        {
          "name": "options",
          "type": "table",
          "description": "Progress bar configuration options"
        },
        {
          "name": "callback",
          "type": "function",
          "optional": true,
          "description": "Function to call when progress bar completes or is cancelled"
        },
        {
          "name": "isQBFormat",
          "type": "boolean",
          "optional": true,
          "description": "Whether the options are in QB-Core format (will be auto-converted)"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Returns true if progress bar completed successfully, false if cancelled"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Basic progress bar\nlocal success = Bridge.ProgressBar.Open({\n    duration = 5000,\n    label = \"Repairing vehicle...\",\n    canCancel = true,\n    disable = {\n        move = true,\n        car = true,\n        combat = true\n    },\n    anim = {\n        dict = \"mini@repair\",\n        clip = \"fixing_a_ped\"\n    }\n})\n\nif success then\n    print(\"Repair completed!\")\nelse\n    print(\"Repair cancelled!\")\nend"
    }
  ],
  "serverFunctions": []
}
