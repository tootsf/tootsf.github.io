{
  "name": "Math",
  "icon": "ðŸ§®",
  "description": "Mathematical utility functions for 3D calculations, value clamping, interpolation, and common mathematical operations. This module provides essential mathematical tools for game development including smoothing, mapping values between ranges, and mathematical computations.",
  "note": "This module is available on both client and server sides. All functions are pure mathematical operations with no side effects.",
  "compatibleResources": [
    "Universal - No dependencies"
  ],
  "clientFunctions": [
    {
      "name": "Clamp",
      "description": "Clamps a value between a minimum and maximum range.",
      "syntax": "Bridge.Math.Clamp(value, min, max)",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value to clamp"
        },
        {
          "name": "min",
          "type": "number",
          "description": "The minimum value"
        },
        {
          "name": "max",
          "type": "number",
          "description": "The maximum value"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "The clamped value"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\nlocal health = Bridge.Math.Clamp(playerHealth, 0, 100)\nprint('Clamped health:', health)"
    },
    {
      "name": "Round",
      "syntax": "Bridge.Math.Round(value)",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value to round"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "The rounded value to nearest whole number"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\nlocal rounded = Bridge.Math.Round(3.7)\nprint('Rounded value:', rounded) -- Output: 4",
      "description": "Function Round"
    },
    {
      "name": "Truncate",
      "syntax": "Bridge.Math.Truncate(value, decimals)",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value to truncate"
        },
        {
          "name": "decimals",
          "type": "number",
          "description": "Number of decimal places to keep",
          "optional": true
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "The truncated value"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\nlocal truncated = Bridge.Math.Truncate(3.14159, 2)\nprint('Truncated value:', truncated) -- Output: 3.14",
      "description": "Function Truncate"
    },
    {
      "name": "Wrap",
      "syntax": "Bridge.Math.Wrap(value, min, max)",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value to wrap"
        },
        {
          "name": "min",
          "type": "number",
          "description": "The minimum value"
        },
        {
          "name": "max",
          "type": "number",
          "description": "The maximum value"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "The wrapped value within the range"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\nlocal angle = Bridge.Math.Wrap(370, 0, 360)\nprint('Wrapped angle:', angle) -- Output: 10",
      "description": "Function Wrap"
    },
    {
      "name": "Smooth",
      "syntax": "Bridge.Math.Smooth(value, min, max)",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The interpolation value"
        },
        {
          "name": "min",
          "type": "number",
          "description": "The minimum value"
        },
        {
          "name": "max",
          "type": "number",
          "description": "The maximum value"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "The interpolated value using smoothstep algorithm"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\nlocal smoothed = Bridge.Math.Smooth(0.5, 0, 1)\nprint('Smoothed value:', smoothed)",
      "note": "Uses smoothstep interpolation algorithm for smooth transitions",
      "description": "Function Smooth"
    },
    {
      "name": "Map",
      "syntax": "Bridge.Math.Map(value, inMin, inMax, outMin, outMax)",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value to map"
        },
        {
          "name": "inMin",
          "type": "number",
          "description": "Input range minimum"
        },
        {
          "name": "inMax",
          "type": "number",
          "description": "Input range maximum"
        },
        {
          "name": "outMin",
          "type": "number",
          "description": "Output range minimum"
        },
        {
          "name": "outMax",
          "type": "number",
          "description": "Output range maximum"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "The mapped value in the new range"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n-- Map speed (0-100) to volume (0.0-1.0)\nlocal volume = Bridge.Math.Map(speed, 0, 100, 0.0, 1.0)\nSetVehicleRadioVolume(vehicle, volume)",
      "description": "Function Map"
    }
  ],
  "serverFunctions": [
    {
      "name": "Clamp",
      "syntax": "Bridge.Math.Clamp(value, min, max)",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value to clamp"
        },
        {
          "name": "min",
          "type": "number",
          "description": "The minimum value"
        },
        {
          "name": "max",
          "type": "number",
          "description": "The maximum value"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "The clamped value"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\nlocal damage = Bridge.Math.Clamp(weaponDamage, 10, 100)\nprint('Clamped damage:', damage)",
      "description": "Function Clamp"
    },
    {
      "name": "Round",
      "syntax": "Bridge.Math.Round(value)",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value to round"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "The rounded value to nearest whole number"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\nlocal price = Bridge.Math.Round(item.cost * 1.15)\nprint('Rounded price:', price)",
      "description": "Function Round"
    },
    {
      "name": "Truncate",
      "syntax": "Bridge.Math.Truncate(value, decimals)",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value to truncate"
        },
        {
          "name": "decimals",
          "type": "number",
          "description": "Number of decimal places to keep",
          "optional": true
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "The truncated value"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\nlocal money = Bridge.Math.Truncate(playerMoney, 2)\nprint('Money with 2 decimals:', money)",
      "description": "Function Truncate"
    },
    {
      "name": "Wrap",
      "syntax": "Bridge.Math.Wrap(value, min, max)",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value to wrap"
        },
        {
          "name": "min",
          "type": "number",
          "description": "The minimum value"
        },
        {
          "name": "max",
          "type": "number",
          "description": "The maximum value"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "The wrapped value within the range"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\nlocal hour = Bridge.Math.Wrap(currentHour + offset, 0, 24)\nprint('Wrapped hour:', hour)",
      "description": "Function Wrap"
    },
    {
      "name": "Smooth",
      "syntax": "Bridge.Math.Smooth(value, min, max)",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The interpolation value"
        },
        {
          "name": "min",
          "type": "number",
          "description": "The minimum value"
        },
        {
          "name": "max",
          "type": "number",
          "description": "The maximum value"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "The interpolated value using smoothstep algorithm"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\nlocal progress = Bridge.Math.Smooth(timeElapsed / totalTime, 0, 1)\nprint('Smooth progress:', progress)",
      "description": "Function Smooth"
    },
    {
      "name": "Map",
      "syntax": "Bridge.Math.Map(value, inMin, inMax, outMin, outMax)",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "description": "The value to map"
        },
        {
          "name": "inMin",
          "type": "number",
          "description": "Input range minimum"
        },
        {
          "name": "inMax",
          "type": "number",
          "description": "Input range maximum"
        },
        {
          "name": "outMin",
          "type": "number",
          "description": "Output range minimum"
        },
        {
          "name": "outMax",
          "type": "number",
          "description": "Output range maximum"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "The mapped value in the new range"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n-- Map player level (1-100) to experience multiplier (1.0-2.5)\nlocal multiplier = Bridge.Math.Map(playerLevel, 1, 100, 1.0, 2.5)\nlocal exp = baseExp * multiplier",
      "description": "Function Map"
    }
  ]
}