{
  "name": "Generators",
  "icon": "ðŸŽ²",
  "description": "The Generators library provides tools for creating and managing randomized content including loot tables with weighted probability systems and automatic item file generation for different inventory systems.",
  "clientFunctions": [],
  "serverFunctions": [
    {
      "name": "LootTable.Register",
      "description": "Registers a new loot table with items, chances, and tier configuration for randomized loot generation.",
      "syntax": "Bridge.LootTable.Register(name, items)",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "description": "Unique identifier for the loot table"
        },
        {
          "name": "items",
          "type": "table",
          "description": "Table of items with min/max counts, chance percentages, tiers, and metadata"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "The registered loot table in normalized format"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Register a chest loot table\nBridge.LootTable.Register('treasure_chest', {\n    gold_bar = {\n        min = 1,\n        max = 3,\n        chance = 15, -- 15% chance\n        tier = 1,\n        item = 'gold_bar',\n        metadata = {quality = 'pure'}\n    },\n    lockpick = {\n        min = 2,\n        max = 5,\n        chance = 45, -- 45% chance\n        tier = 1,\n        item = 'lockpick',\n        metadata = {durability = 100}\n    },\n    rare_gem = {\n        min = 1,\n        max = 1,\n        chance = 5, -- 5% chance\n        tier = 2,\n        item = 'rare_gem',\n        metadata = {type = 'diamond'}\n    }\n})\n\nprint('Treasure chest loot table registered')"
    },
    {
      "name": "LootTable.Get",
      "description": "Retrieves a registered loot table by name.",
      "syntax": "Bridge.LootTable.Get(name)",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "description": "Name of the loot table to retrieve"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "The loot table array or empty table if not found"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal chestLoot = Bridge.LootTable.Get('treasure_chest')\nif #chestLoot > 0 then\n    print('Found ' .. #chestLoot .. ' items in treasure chest loot table')\nelse\n    print('Treasure chest loot table not found')\nend"
    },
    {
      "name": "LootTable.GetRandomItem",
      "description": "Gets a single random item from a loot table based on chance rolls and tier filtering.",
      "syntax": "Bridge.LootTable.GetRandomItem(name, tier, randomNumber)",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "description": "Name of the loot table"
        },
        {
          "name": "tier",
          "type": "number | nil",
          "description": "Tier filter for items (default: 1)"
        },
        {
          "name": "randomNumber",
          "type": "number | nil",
          "description": "Custom random number 1-100 (auto-generated if nil)"
        }
      ],
      "returns": [
        {
          "type": "table | nil",
          "description": "Random item with count, metadata, tier, and chance or nil if no match"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Get random item from tier 1\nlocal item = Bridge.LootTable.GetRandomItem('treasure_chest', 1)\nif item then\n    print('Found: ' .. item.item .. ' x' .. item.count)\n    print('Tier: ' .. item.tier .. ', Chance: ' .. item.chance .. '%')\n    \n    -- Add to player inventory\n    Bridge.Inventory.AddItem(source, item.item, item.count, nil, item.metadata)\nelse\n    print('No item found this time')\nend\n\n-- Get rare tier 2 item with specific roll\nlocal rareItem = Bridge.LootTable.GetRandomItem('treasure_chest', 2, 3) -- 3% roll\nif rareItem then\n    print('Lucky! Found rare item: ' .. rareItem.item)\nend"
    },
    {
      "name": "LootTable.GetRandomItems",
      "description": "Gets all items from a loot table that match the chance roll and tier criteria.",
      "syntax": "Bridge.LootTable.GetRandomItems(name, tier, randomNumber)",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "description": "Name of the loot table"
        },
        {
          "name": "tier",
          "type": "number | nil",
          "description": "Tier filter for items (default: 1)"
        },
        {
          "name": "randomNumber",
          "type": "number | nil",
          "description": "Custom random number 1-100 (auto-generated if nil)"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Array of all matching items with counts, metadata, tiers, and chances"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Get all matching items from a loot table\nlocal items = Bridge.LootTable.GetRandomItems('treasure_chest', 1)\nprint('Found ' .. #items .. ' items:')\n\nfor _, item in pairs(items) do\n    print('- ' .. item.item .. ' x' .. item.count .. ' (' .. item.chance .. '% chance)')\n    Bridge.Inventory.AddItem(source, item.item, item.count, nil, item.metadata)\nend\n\nif #items > 0 then\n    Bridge.Framework.Notify('You found ' .. #items .. ' items!', 'success')\nelse\n    Bridge.Framework.Notify('The chest was empty...', 'error')\nend"
    },
    {
      "name": "LootTable.GetRandomItemsWithLimit",
      "description": "Gets random items with one-time selection (items are removed from table after being selected).",
      "syntax": "Bridge.LootTable.GetRandomItemsWithLimit(name, tier, randomNumber)",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "description": "Name of the loot table"
        },
        {
          "name": "tier",
          "type": "number | nil",
          "description": "Tier filter for items (default: 1)"
        },
        {
          "name": "randomNumber",
          "type": "number | nil",
          "description": "Custom random number 1-100 (auto-generated if nil)"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Array of selected items (items removed from source table)"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Get items with depletion (one-time loot)\nlocal items = Bridge.LootTable.GetRandomItemsWithLimit('treasure_chest', 1)\nfor _, item in pairs(items) do\n    -- item format: {item_name, metadata, count, tier, chance}\n    local itemName, metadata, count, tier, chance = item[1], item[2], item[3], item[4], item[5]\n    Bridge.Inventory.AddItem(source, itemName, count, nil, metadata)\n    print('Added: ' .. itemName .. ' x' .. count)\nend\n\n-- Note: Selected items are removed from the loot table\nprint('Loot table depleted by ' .. #items .. ' items')"
    },
    {
      "name": "ItemsBuilder.Generate",
      "description": "Generates item configuration files for different inventory systems (QB-Core old/new, OX Inventory) from a universal item table.",
      "syntax": "Bridge.ItemsBuilder.Generate(invoking, outputPrefix, itemsTable, useQB)",
      "parameters": [
        {
          "name": "invoking",
          "type": "string | nil",
          "description": "Resource name generating the files (auto-detected if nil)"
        },
        {
          "name": "outputPrefix",
          "type": "string | nil",
          "description": "Output directory name (default: 'generated_items')"
        },
        {
          "name": "itemsTable",
          "type": "table",
          "description": "Universal item definitions with label, weight, description, etc."
        },
        {
          "name": "useQB",
          "type": "boolean | nil",
          "description": "Whether input is in QB format (true) or OX format (false)"
        }
      ],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Define items in universal format\nlocal items = {\n    lockpick = {\n        label = 'Lockpick',\n        description = 'Used to pick locks',\n        weight = 100,\n        stack = true,\n        close = true,\n        client = {\n            image = 'lockpick.png'\n        }\n    },\n    gold_bar = {\n        label = 'Gold Bar',\n        description = 'A valuable gold bar',\n        weight = 1000,\n        stack = true,\n        close = false,\n        client = {\n            image = 'gold_bar.png'\n        }\n    }\n}\n\n-- Generate files for all inventory systems\nBridge.ItemsBuilder.Generate(\n    'my_resource',\n    'items_output',\n    items,\n    false -- OX format input\n)\n\nprint('Generated item files:')\nprint('- my_resource(qb_core_old).lua')\nprint('- my_resource(qb_core_new).lua')\nprint('- my_resource(ox_inventory).lua')"
    }
  ],
  "sharedFunctions": []
}
