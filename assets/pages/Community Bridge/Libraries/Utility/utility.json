{
  "name": "Utility",
  "icon": "üõ†Ô∏è",
  "description": "The Utility library provides a comprehensive collection of client-side helper functions for common FiveM operations including entity creation, blip management, UI utilities, and coordinate operations. Essential for game world manipulation and player interaction.",
  "clientFunctions": [
    {
      "name": "CreateProp",
      "description": "Creates a prop (object) at specified coordinates with automatic model loading and cleanup.",
      "syntax": "Bridge.Utility.CreateProp(model, coords, heading, networked)",
      "parameters": [
        {
          "name": "model",
          "type": "string | number",
          "description": "Model name or hash of the prop to create"
        },
        {
          "name": "coords",
          "type": "vector3",
          "description": "World coordinates where to create the prop"
        },
        {
          "name": "heading",
          "type": "number",
          "description": "Rotation heading of the prop"
        },
        {
          "name": "networked",
          "type": "boolean",
          "description": "Whether the prop should be networked to other players"
        }
      ],
      "returns": [
        {
          "type": "number | nil",
          "description": "Entity handle of created prop, or nil if failed"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Create a traffic cone\nlocal playerCoords = GetEntityCoords(PlayerPedId())\nlocal cone = Bridge.Utility.CreateProp(\n    'prop_roadcone02a',\n    playerCoords + vector3(2, 0, 0),\n    0.0,\n    true\n)\n\nif cone then\n    print('Traffic cone created with handle: ' .. cone)\nelse\n    print('Failed to create traffic cone')\nend"
    },
    {
      "name": "CreateVehicle",
      "description": "Creates a vehicle with specified model and coordinates, returning both entity handle and metadata.",
      "syntax": "Bridge.Utility.CreateVehicle(model, coords, heading, networked)",
      "parameters": [
        {
          "name": "model",
          "type": "string | number",
          "description": "Vehicle model name or hash"
        },
        {
          "name": "coords",
          "type": "vector3",
          "description": "Spawn coordinates"
        },
        {
          "name": "heading",
          "type": "number",
          "description": "Vehicle heading"
        },
        {
          "name": "networked",
          "type": "boolean",
          "description": "Whether vehicle should be networked"
        }
      ],
      "returns": [
        {
          "type": "number | nil",
          "description": "Vehicle entity handle"
        },
        {
          "type": "table",
          "description": "Vehicle metadata with networkid, coords, and heading"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Spawn a police car\nlocal spawnCoords = GetEntityCoords(PlayerPedId()) + vector3(5, 0, 0)\nlocal vehicle, metadata = Bridge.Utility.CreateVehicle(\n    'police',\n    spawnCoords,\n    90.0,\n    true\n)\n\nif vehicle then\n    print('Vehicle spawned at: ' .. tostring(metadata.coords))\n    print('Network ID: ' .. metadata.networkid)\n    TaskWarpPedIntoVehicle(PlayerPedId(), vehicle, -1)\nend"
    },
    {
      "name": "CreatePed",
      "description": "Creates a ped with specified model and coordinates with automatic tracking for cleanup.",
      "syntax": "Bridge.Utility.CreatePed(model, coords, heading, networked, settings)",
      "parameters": [
        {
          "name": "model",
          "type": "string | number",
          "description": "Ped model name or hash"
        },
        {
          "name": "coords",
          "type": "vector3",
          "description": "Spawn coordinates"
        },
        {
          "name": "heading",
          "type": "number",
          "description": "Ped heading"
        },
        {
          "name": "networked",
          "type": "boolean",
          "description": "Whether ped should be networked"
        },
        {
          "name": "settings",
          "type": "table | nil",
          "description": "Optional ped configuration settings"
        }
      ],
      "returns": [
        {
          "type": "number | nil",
          "description": "Ped entity handle or nil if failed"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Create a shop keeper\nlocal shopCoords = vector3(100, 200, 20)\nlocal shopKeeper = Bridge.Utility.CreatePed(\n    's_m_m_shopkeep_01',\n    shopCoords,\n    180.0,\n    false,\n    {scenario = 'WORLD_HUMAN_STAND_IMPATIENT'}\n)\n\nif shopKeeper then\n    TaskStartScenarioInPlace(shopKeeper, 'WORLD_HUMAN_STAND_IMPATIENT', 0, true)\n    print('Shop keeper created')\nend"
    },
    {
      "name": "GetStreetNameAtCoords",
      "description": "Gets the street name and crossing street at specified coordinates.",
      "syntax": "Bridge.Utility.GetStreetNameAtCoords(coords)",
      "parameters": [
        {
          "name": "coords",
          "type": "vector3",
          "description": "Coordinates to get street names for"
        }
      ],
      "returns": [
        {
          "type": "string",
          "description": "Primary street name"
        },
        {
          "type": "string",
          "description": "Crossing street name"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal playerCoords = GetEntityCoords(PlayerPedId())\nlocal street, crossing = Bridge.Utility.GetStreetNameAtCoords(playerCoords)\n\nlocal locationText = street\nif crossing and crossing ~= '' then\n    locationText = street .. ' & ' .. crossing\nend\n\nprint('Current location: ' .. locationText)"
    },
    {
      "name": "StartBusySpinner",
      "description": "Shows a busy spinner with custom text during loading operations.",
      "syntax": "Bridge.Utility.StartBusySpinner(text)",
      "parameters": [
        {
          "name": "text",
          "type": "string",
          "description": "Text to display with the spinner"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if spinner was started successfully"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Show loading spinner\nBridge.Utility.StartBusySpinner('Loading player data...')\n\n-- Simulate loading\nWait(3000)\n\n-- Hide spinner\nBridge.Utility.StopBusySpinner()"
    },
    {
      "name": "StopBusySpinner",
      "description": "Stops the currently active busy spinner.",
      "syntax": "Bridge.Utility.StopBusySpinner()",
      "parameters": [],
      "returns": [
        {
          "type": "boolean",
          "description": "True if spinner was stopped, false if none was active"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Stop any active spinner\nlocal stopped = Bridge.Utility.StopBusySpinner()\nif stopped then\n    print('Spinner stopped')\nelse\n    print('No spinner was active')\nend"
    },
    {
      "name": "CreateBlip",
      "description": "Creates a blip on the map at specified coordinates with automatic tracking for cleanup.",
      "syntax": "Bridge.Utility.CreateBlip(coords, sprite, color, scale, label, shortRange, displayType)",
      "parameters": [
        {
          "name": "coords",
          "type": "vector3",
          "description": "Coordinates for the blip"
        },
        {
          "name": "sprite",
          "type": "number | nil",
          "description": "Blip sprite ID (default: 8)"
        },
        {
          "name": "color",
          "type": "number | nil",
          "description": "Blip color ID (default: 3)"
        },
        {
          "name": "scale",
          "type": "number | nil",
          "description": "Blip scale (default: 0.8)"
        },
        {
          "name": "label",
          "type": "string",
          "description": "Blip label text"
        },
        {
          "name": "shortRange",
          "type": "boolean",
          "description": "Whether blip is short range"
        },
        {
          "name": "displayType",
          "type": "number | nil",
          "description": "Blip display type (default: 2)"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "Blip handle"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Create a shop blip\nlocal shopBlip = Bridge.Utility.CreateBlip(\n    vector3(100, 200, 20),\n    52, -- Shop sprite\n    2,  -- Green color\n    1.0,\n    'General Store',\n    true,\n    2\n)\n\nprint('Shop blip created with handle: ' .. shopBlip)"
    },
    {
      "name": "CreateEntityBlip",
      "description": "Creates a blip that follows a specific entity with automatic tracking.",
      "syntax": "Bridge.Utility.CreateEntityBlip(entity, sprite, color, scale, label, shortRange, displayType)",
      "parameters": [
        {
          "name": "entity",
          "type": "number",
          "description": "Entity handle to attach blip to"
        },
        {
          "name": "sprite",
          "type": "number | nil",
          "description": "Blip sprite ID (default: 8)"
        },
        {
          "name": "color",
          "type": "number | nil",
          "description": "Blip color ID (default: 3)"
        },
        {
          "name": "scale",
          "type": "number | nil",
          "description": "Blip scale (default: 0.8)"
        },
        {
          "name": "label",
          "type": "string",
          "description": "Blip label text"
        },
        {
          "name": "shortRange",
          "type": "boolean",
          "description": "Whether blip is short range"
        },
        {
          "name": "displayType",
          "type": "number | nil",
          "description": "Blip display type (default: 2)"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "Blip handle"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Create blip for player's vehicle\nlocal vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nif vehicle ~= 0 then\n    local vehicleBlip = Bridge.Utility.CreateEntityBlip(\n        vehicle,\n        225, -- Car sprite\n        3,   -- Blue color\n        0.8,\n        'My Vehicle',\n        false,\n        2\n    )\n    print('Vehicle blip created')\nend"
    },
    {
      "name": "RemoveBlip",
      "description": "Safely removes a blip and cleans it from the tracking system.",
      "syntax": "Bridge.Utility.RemoveBlip(blip)",
      "parameters": [
        {
          "name": "blip",
          "type": "number",
          "description": "Blip handle to remove"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if blip was found and removed"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Remove a specific blip\nlocal removed = Bridge.Utility.RemoveBlip(shopBlip)\nif removed then\n    print('Shop blip removed')\nelse\n    print('Blip not found in tracking system')\nend"
    }
  ],
  "serverFunctions": [],
  "sharedFunctions": []
}
