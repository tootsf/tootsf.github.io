{
  "name": "Raycast",
  "icon": "ðŸŽ¯",
  "description": "The Raycast library provides advanced ray casting functionality for collision detection and world interaction. It includes camera-based raycasting, forward vector calculations, and comprehensive collision detection with material and normal information.",
  "clientFunctions": [
    {
      "name": "GetForwardVector",
      "description": "Calculates the forward vector from a given rotation or camera rotation, useful for determining direction-based calculations.",
      "syntax": "Bridge.Raycast.GetForwardVector(rotation)",
      "parameters": [
        {
          "name": "rotation",
          "type": "vector3 | nil",
          "description": "Rotation vector to calculate forward direction from (uses camera rotation if nil)"
        }
      ],
      "returns": [
        {
          "type": "vector3",
          "description": "Normalized forward vector"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Get camera forward vector\nlocal cameraForward = Bridge.Raycast.GetForwardVector()\nprint(\"Camera forward: \" .. tostring(cameraForward))\n\n-- Get forward vector from custom rotation\nlocal customRotation = vector3(0.0, 0.0, 45.0)\nlocal customForward = Bridge.Raycast.GetForwardVector(customRotation)\nprint(\"Custom forward: \" .. tostring(customForward))"
    },
    {
      "name": "ToCoords",
      "description": "Performs a raycast between two coordinate points with comprehensive collision detection, returning detailed hit information including entity, material, and surface normals.",
      "syntax": "Bridge.Raycast.ToCoords(startCoords, endCoords, flag, ignore)",
      "parameters": [
        {
          "name": "startCoords",
          "type": "vector3",
          "description": "Starting coordinates for the raycast"
        },
        {
          "name": "endCoords",
          "type": "vector3",
          "description": "Ending coordinates for the raycast"
        },
        {
          "name": "flag",
          "type": "number | nil",
          "description": "Collision flags to determine what to hit (default: 511 for all)"
        },
        {
          "name": "ignore",
          "type": "number | nil",
          "description": "Entity handle to ignore during raycast (default: 4)"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "Result code (2 = hit, 1 = miss)"
        },
        {
          "type": "number",
          "description": "Entity handle that was hit"
        },
        {
          "type": "vector3",
          "description": "Final coordinates where ray hit"
        },
        {
          "type": "vector3",
          "description": "Surface normal vector at hit point"
        },
        {
          "type": "number",
          "description": "Material hash of the surface hit"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal playerCoords = GetEntityCoords(PlayerPedId())\nlocal targetCoords = playerCoords + vector3(0.0, 5.0, 0.0)\n\nlocal retval, entity, hitCoords, normals, material = Bridge.Raycast.ToCoords(\n    playerCoords,\n    targetCoords,\n    511, -- Hit everything\n    PlayerPedId() -- Ignore player\n)\n\nif retval == 2 then\n    print(\"Hit detected!\")\n    print(\"Hit coordinates: \" .. tostring(hitCoords))\n    print(\"Hit entity: \" .. tostring(entity))\n    print(\"Surface normal: \" .. tostring(normals))\n    print(\"Material hash: \" .. tostring(material))\nelse\n    print(\"No collision detected\")\nend"
    },
    {
      "name": "FromCamera",
      "description": "Performs a raycast from the camera position in the direction the camera is facing, with automatic fallback for missed hits. Perfect for player interaction systems.",
      "syntax": "Bridge.Raycast.FromCamera(flags, ignore, distance)",
      "parameters": [
        {
          "name": "flags",
          "type": "number | nil",
          "description": "Collision flags to determine what to hit"
        },
        {
          "name": "ignore",
          "type": "number | nil",
          "description": "Entity handle to ignore during raycast"
        },
        {
          "name": "distance",
          "type": "number | nil",
          "description": "Maximum raycast distance (default: 10)"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "Result code (2 = hit, 1 = miss)"
        },
        {
          "type": "number",
          "description": "Entity handle that was hit"
        },
        {
          "type": "vector3",
          "description": "Final coordinates where ray hit"
        },
        {
          "type": "vector3",
          "description": "Surface normal vector at hit point"
        },
        {
          "type": "number",
          "description": "Material hash of the surface hit"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Raycast from camera with 25 unit range\nlocal retval, entity, hitCoords, normals, material = Bridge.Raycast.FromCamera(\n    511, -- Hit everything\n    PlayerPedId(), -- Ignore player\n    25.0 -- 25 unit distance\n)\n\nif retval == 2 then\n    if entity and entity ~= 0 then\n        local entityType = GetEntityType(entity)\n        if entityType == 1 then -- Ped\n            print(\"Looking at a ped\")\n        elseif entityType == 2 then -- Vehicle\n            print(\"Looking at a vehicle\")\n        elseif entityType == 3 then -- Object\n            print(\"Looking at an object\")\n        end\n    else\n        print(\"Looking at terrain/building\")\n    end\n    \n    -- Place a marker at the hit location\n    local markerId = Bridge.Markers.Create({\n        position = hitCoords,\n        marker = 1,\n        size = vector3(0.5, 0.5, 0.5),\n        color = vector3(255, 0, 0)\n    })\nelse\n    print(\"No hit detected from camera\")\nend"
    }
  ],
  "serverFunctions": [],
  "sharedFunctions": []
}
