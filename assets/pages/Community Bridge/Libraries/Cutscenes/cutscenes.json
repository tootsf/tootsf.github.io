{
  "name": "Cutscenes",
  "icon": "ðŸŽ¬",
  "description": "The Cutscenes library provides comprehensive cutscene management with character integration, outfit preservation, and multiplayer support. Handles loading, character registration, tag management, and seamless transitions between gameplay and cinematic sequences.",
  "clientFunctions": [
    {
      "name": "GetTags",
      "description": "Retrieves available character tags from a specific cutscene for character assignment.",
      "syntax": "Bridge.Cutscene.GetTags(cutscene)",
      "parameters": [
        {
          "name": "cutscene",
          "type": "string",
          "description": "Name of the cutscene to analyze for character tags"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Array of character tag objects with male/female variants"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Get available character slots in a cutscene\nlocal tags = Bridge.Cutscene.GetTags('mp_intro_concierge')\nprint('Available character tags: ' .. #tags)\n\nfor i, tag in pairs(tags) do\n    print('Tag ' .. i .. ':')\n    if tag.male then print('  Male: ' .. tag.male) end\n    if tag.female then print('  Female: ' .. tag.female) end\nend"
    },
    {
      "name": "Load",
      "description": "Loads a cutscene with appropriate playback list based on player gender, with timeout handling.",
      "syntax": "Bridge.Cutscene.Load(cutscene)",
      "parameters": [
        {
          "name": "cutscene",
          "type": "string",
          "description": "Name of the cutscene to load"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if cutscene loaded successfully, false if failed or timed out"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Load a cutscene before playing\nlocal loaded = Bridge.Cutscene.Load('mp_intro_concierge')\nif loaded then\n    print('Cutscene loaded successfully')\n    -- Proceed with cutscene setup\nelse\n    print('Failed to load cutscene')\n    Bridge.Framework.Notify('Cutscene unavailable', 'error')\nend"
    },
    {
      "name": "SavePedOutfit",
      "description": "Saves all clothing and prop components of a ped for later restoration after cutscenes.",
      "syntax": "Bridge.Cutscene.SavePedOutfit(ped)",
      "parameters": [
        {
          "name": "ped",
          "type": "number",
          "description": "Ped entity handle to save outfit from"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Complete outfit data including all components and props"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Save player's current outfit before cutscene\nlocal playerPed = PlayerPedId()\nlocal savedOutfit = Bridge.Cutscene.SavePedOutfit(playerPed)\n\nprint('Saved outfit components:')\nfor component, data in pairs(savedOutfit) do\n    print('- ' .. component .. ': ' .. json.encode(data))\nend\n\n-- Store for later restoration\nlocal cutsceneData = {\n    originalOutfit = savedOutfit,\n    ped = playerPed\n}"
    },
    {
      "name": "ApplyPedOutfit",
      "description": "Applies saved outfit data to a ped, restoring all clothing components and props.",
      "syntax": "Bridge.Cutscene.ApplyPedOutfit(ped, outfitData)",
      "parameters": [
        {
          "name": "ped",
          "type": "number",
          "description": "Ped entity handle to apply outfit to"
        },
        {
          "name": "outfitData",
          "type": "table",
          "description": "Outfit data from SavePedOutfit function"
        }
      ],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Restore player's outfit after cutscene\nlocal playerPed = PlayerPedId()\nBridge.Cutscene.ApplyPedOutfit(playerPed, cutsceneData.originalOutfit)\nprint('Player outfit restored')\n\n-- Apply custom outfit\nlocal customOutfit = {\n    head = {id = 0, type = 'drawable', drawable = 1, texture = 0, palette = 0},\n    hair = {id = 2, type = 'drawable', drawable = 3, texture = 2, palette = 0},\n    hat = {id = 0, type = 'prop', propIndex = 5, propTexture = 1}\n}\nBridge.Cutscene.ApplyPedOutfit(playerPed, customOutfit)"
    },
    {
      "name": "Create",
      "description": "Creates a comprehensive cutscene setup with character registration, tag assignment, and outfit preservation for multiple participants.",
      "syntax": "Bridge.Cutscene.Create(cutscene, coords, srcs)",
      "parameters": [
        {
          "name": "cutscene",
          "type": "string",
          "description": "Name of the cutscene to create"
        },
        {
          "name": "coords",
          "type": "vector3 | boolean | nil",
          "description": "Cutscene coordinates (false for player position, nil for cutscene default)"
        },
        {
          "name": "srcs",
          "type": "table | nil",
          "description": "Array of participants: server IDs (numbers), entity handles, or model names (strings)"
        }
      ],
      "returns": [
        {
          "type": "table | boolean",
          "description": "Cutscene data object for use with Start() or false if creation failed"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Create cutscene with multiple participants\nlocal participants = {\n    1, -- Server ID of another player\n    2, -- Another player\n    'mp_m_freemode_01', -- NPC model\n    someEntityHandle -- Existing ped entity\n}\n\nlocal cutsceneData = Bridge.Cutscene.Create(\n    'mp_intro_concierge',\n    vector3(100, 200, 30), -- Custom location\n    participants\n)\n\nif cutsceneData then\n    print('Cutscene created with ' .. #cutsceneData.peds .. ' participants')\n    print('Using tags: ' .. table.concat(cutsceneData.tags, ', '))\n    \n    -- Ready to start cutscene\n    Bridge.Cutscene.Start(cutsceneData)\nelse\n    print('Failed to create cutscene')\nend\n\n-- Simple single-player cutscene\nlocal simpleData = Bridge.Cutscene.Create('mp_intro_concierge', false)\nif simpleData then\n    Bridge.Cutscene.Start(simpleData)\nend"
    },
    {
      "name": "Start",
      "description": "Starts a prepared cutscene with fade effects, control blocking, and automatic cleanup when finished.",
      "syntax": "Bridge.Cutscene.Start(cutsceneData)",
      "parameters": [
        {
          "name": "cutsceneData",
          "type": "table",
          "description": "Cutscene data object from Create() function"
        }
      ],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Start a prepared cutscene\nlocal cutsceneData = Bridge.Cutscene.Create('mp_intro_concierge', false, {1, 2})\nif cutsceneData then\n    -- Notify players\n    Bridge.Framework.Notify('Starting cutscene...', 'info', 3000)\n    \n    -- Start cutscene (blocking until finished)\n    Bridge.Cutscene.Start(cutsceneData)\n    \n    -- This code runs after cutscene completes\n    print('Cutscene finished')\n    Bridge.Framework.Notify('Cutscene complete', 'success', 2000)\nend\n\n-- Check if cutscene is still running\nCreateThread(function()\n    while not Bridge.Cutscene.done do\n        -- Cutscene is playing\n        print('Cutscene in progress...')\n        Wait(1000)\n    end\n    print('Cutscene completed or stopped')\nend)"
    }
  ],
  "serverFunctions": [],
  "sharedFunctions": []
}
