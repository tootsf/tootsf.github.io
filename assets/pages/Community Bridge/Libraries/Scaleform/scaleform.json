{
  "name": "Scaleform",
  "icon": "ðŸ“º",
  "description": "The Scaleform library provides advanced interface management for GTA V's built-in Scaleform UI system, particularly for instructional buttons with customizable controls, automatic rendering, and button configuration.",
  "clientFunctions": [
    {
      "name": "SetupInstructionalButtons",
      "description": "Creates and configures an instructional buttons scaleform with custom button layouts and control bindings.",
      "syntax": "Bridge.Scaleform.SetupInstructionalButtons(buttons)",
      "parameters": [
        {
          "name": "buttons",
          "type": "table | nil",
          "description": "Array of button configuration objects (uses defaults if nil)"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "Scaleform handle for the configured instructional buttons"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Create custom instructional buttons\nlocal buttonConfig = {\n    {type = 'CLEAR_ALL'},\n    {type = 'SET_CLEAR_SPACE', int = 200},\n    {\n        type = 'SET_DATA_SLOT',\n        name = 'Interact',\n        keyIndex = {38}, -- E key\n        int = 0\n    },\n    {\n        type = 'SET_DATA_SLOT',\n        name = 'Cancel',\n        keyIndex = {73}, -- X key\n        int = 1\n    },\n    {\n        type = 'SET_DATA_SLOT',\n        name = 'Move',\n        keyIndex = {32, 33, 34, 35}, -- WASD\n        int = 2\n    },\n    {type = 'DRAW_INSTRUCTIONAL_BUTTONS'},\n    {type = 'SET_BACKGROUND_COLOUR'}\n}\n\nlocal scaleform = Bridge.Scaleform.SetupInstructionalButtons(buttonConfig)\n\n-- Start displaying the buttons\nBridge.Scaleform.Run(scaleform, function()\n    -- Update callback - return true to stop\n    if IsControlJustPressed(0, 73) then -- X pressed\n        return true -- Stop scaleform\n    end\n    return false -- Keep running\nend)"
    },
    {
      "name": "Run",
      "description": "Starts rendering a scaleform with optional update callback for dynamic content and stop conditions.",
      "syntax": "Bridge.Scaleform.Run(scaleform, onUpdate)",
      "parameters": [
        {
          "name": "scaleform",
          "type": "number",
          "description": "Scaleform handle to render"
        },
        {
          "name": "onUpdate",
          "type": "function | nil",
          "description": "Optional callback function called each frame (return true to stop)"
        }
      ],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Simple scaleform display\nlocal scaleform = Bridge.Scaleform.SetupInstructionalButtons({})\nBridge.Scaleform.Run(scaleform)\n\n-- Interactive scaleform with state checking\nlocal isActive = true\nBridge.Scaleform.Run(scaleform, function()\n    -- Check for exit conditions\n    if IsControlJustPressed(0, 200) then -- ESC\n        Bridge.Framework.Notify('UI closed', 'info')\n        return true -- Stop scaleform\n    end\n    \n    -- Check for interactions\n    if IsControlJustPressed(0, 38) then -- E\n        Bridge.Framework.Notify('Interaction pressed', 'success')\n    end\n    \n    return not isActive -- Stop when isActive becomes false\nend)\n\n-- Stop from another thread\nCreateThread(function()\n    Wait(10000) -- 10 seconds\n    isActive = false\nend)"
    },
    {
      "name": "Stop",
      "description": "Stops the currently running scaleform rendering, cleaning up the display thread.",
      "syntax": "Bridge.Scaleform.Stop()",
      "parameters": [],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Start scaleform\nlocal scaleform = Bridge.Scaleform.SetupInstructionalButtons({})\nBridge.Scaleform.Run(scaleform)\n\n-- Stop after 5 seconds\nSetTimeout(5000, function()\n    Bridge.Scaleform.Stop()\n    print('Scaleform stopped')\nend)\n\n-- Or stop based on condition\nCreateThread(function()\n    while true do\n        if IsControlJustPressed(0, 73) then -- X key\n            Bridge.Scaleform.Stop()\n            break\n        end\n        Wait(0)\n    end\nend)"
    }
  ],
  "serverFunctions": [],
  "sharedFunctions": []
}
