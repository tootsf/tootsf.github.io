{
  "name": "StateBags",
  "icon": "🏷️",
  "description": "The StateBags library provides simplified management of FiveM's StateBag system with enhanced entity and player change handlers. It offers convenient methods to watch for state changes on entities and players with automatic validation and filtering.",
  "clientFunctions": [
    {
      "name": "AddEntityChangeHandler",
      "description": "Registers a handler to monitor state changes on entities. Automatically resolves entities from statebag names and validates their existence before triggering callbacks.",
      "syntax": "Bridge.StateBags.AddEntityChangeHandler(keyName, entityId, callback)",
      "parameters": [
        {
          "name": "keyName",
          "type": "string",
          "description": "The statebag key to monitor for changes"
        },
        {
          "name": "entityId",
          "type": "string | nil",
          "description": "Specific entity ID to watch (nil to watch all entities)"
        },
        {
          "name": "callback",
          "type": "function",
          "description": "Callback function with signature (entity, key, value, lastValue, replicated)"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "Handler ID for removing the handler later"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Monitor health changes on all entities\nlocal healthHandler = Bridge.StateBags.AddEntityChangeHandler(\n    \"health\",\n    nil, -- Watch all entities\n    function(entity, key, value, lastValue, replicated)\n        if DoesEntityExist(entity) then\n            local entityType = GetEntityType(entity)\n            print(string.format(\"Entity %d health changed: %d -> %d\", \n                entity, lastValue or 0, value or 0))\n            \n            if entityType == 1 and value <= 0 then -- Ped died\n                print(\"Ped has died!\")\n            end\n        end\n    end\n)\n\n-- Monitor specific vehicle damage state\nlocal myVehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nif myVehicle ~= 0 then\n    local damageHandler = Bridge.StateBags.AddEntityChangeHandler(\n        \"damage_level\",\n        NetworkGetNetworkIdFromEntity(myVehicle),\n        function(entity, key, value, lastValue, replicated)\n            print(\"My vehicle damage level: \" .. tostring(value))\n        end\n    )\nend"
    },
    {
      "name": "AddPlayerChangeHandler",
      "description": "Registers a handler to monitor state changes on players with optional filtering to watch only the current player or all players.",
      "syntax": "Bridge.StateBags.AddPlayerChangeHandler(keyName, filter, callback)",
      "parameters": [
        {
          "name": "keyName",
          "type": "string",
          "description": "The statebag key to monitor for changes"
        },
        {
          "name": "filter",
          "type": "boolean | nil",
          "description": "If true, only watch changes from the current player"
        },
        {
          "name": "callback",
          "type": "function",
          "description": "Callback function with signature (playerId, key, value, lastValue, replicated)"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "Handler ID for removing the handler later"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Monitor money changes for current player only\nlocal moneyHandler = Bridge.StateBags.AddPlayerChangeHandler(\n    \"money\",\n    true, -- Only current player\n    function(playerId, key, value, lastValue, replicated)\n        local difference = (value or 0) - (lastValue or 0)\n        if difference > 0 then\n            print(\"Gained $\" .. difference)\n        elseif difference < 0 then\n            print(\"Lost $\" .. math.abs(difference))\n        end\n    end\n)\n\n-- Monitor job changes for all players\nlocal jobHandler = Bridge.StateBags.AddPlayerChangeHandler(\n    \"job\",\n    false, -- All players\n    function(playerId, key, value, lastValue, replicated)\n        local playerName = GetPlayerName(playerId)\n        print(string.format(\"%s changed job from %s to %s\", \n            playerName, \n            lastValue or \"unemployed\", \n            value or \"unemployed\"))\n    end\n)\n\n-- Monitor stress levels for current player\nlocal stressHandler = Bridge.StateBags.AddPlayerChangeHandler(\n    \"stress\",\n    true,\n    function(playerId, key, value, lastValue, replicated)\n        if value and value > 80 then\n            print(\"Warning: High stress level!\")\n        elseif value and value < 20 then\n            print(\"Stress level is low - feeling relaxed\")\n        end\n    end\n)"
    }
  ],
  "serverFunctions": [],
  "sharedFunctions": []
}
