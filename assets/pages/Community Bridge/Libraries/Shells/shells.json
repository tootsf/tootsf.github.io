{
  "name": "Shells",
  "icon": "üè†",
  "description": "The Shells library provides a comprehensive system for managing MLO (Map Location Object) shells and interiors with seamless transitions, routing bucket management, and interactive object placement. Supports both exterior and interior configurations with automatic entity management.",
  "clientFunctions": [
    {
      "name": "New",
      "description": "Creates a new shell instance with exterior and interior configurations, setting up entity management and interaction points.",
      "syntax": "Bridge.Shells.New(data)",
      "parameters": [
        {
          "name": "data",
          "type": "table",
          "description": "Shell configuration with id, model, coords, exterior/interior objects"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Created shell instance with spawned entity tracking"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Create a new shell with interactive elements\nlocal shell = Bridge.Shells.New({\n    id = 'apartment_1',\n    model = 'shell_apartment1',\n    coords = vector3(100, 200, 30),\n    exterior = {\n        entrance = {\n            id = 'front_door',\n            type = 'entrance',\n            coords = vector3(100, 200, 30),\n            rotation = vector3(0, 0, 0),\n            distance = 2.0\n        }\n    },\n    interior = {\n        exit = {\n            id = 'exit_door',\n            type = 'exit',\n            coords = vector3(0, 0, 0),\n            rotation = vector3(0, 0, 180),\n            distance = 2.0\n        },\n        stash = {\n            id = 'apartment_stash',\n            type = 'stash',\n            coords = vector3(2, 2, 0),\n            rotation = vector3(0, 0, 0),\n            distance = 1.5\n        }\n    }\n})\n\nprint('Shell created: ' .. shell.id)"
    },
    {
      "name": "Enter",
      "description": "Enters a shell interior, handling screen fade, entity teleportation, and interior object spawning.",
      "syntax": "Bridge.Shells.Enter(id, entranceId)",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "description": "Shell identifier"
        },
        {
          "name": "entranceId",
          "type": "string",
          "description": "Entrance point identifier within the shell"
        }
      ],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Enter apartment through front door\nBridge.Shells.Enter('apartment_1', 'front_door')\nprint('Entering apartment...')"
    },
    {
      "name": "Exit",
      "description": "Exits a shell interior, returning to the exterior with proper cleanup and entity management.",
      "syntax": "Bridge.Shells.Exit(id, exitId)",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "description": "Shell identifier"
        },
        {
          "name": "exitId",
          "type": "string",
          "description": "Exit point identifier within the shell"
        }
      ],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Exit apartment through exit door\nBridge.Shells.Exit('apartment_1', 'exit_door')\nprint('Exiting apartment...')"
    },
    {
      "name": "Inside",
      "description": "Checks if the player is currently inside a shell and returns the shell ID.",
      "syntax": "Bridge.Shells.Inside()",
      "parameters": [],
      "returns": [
        {
          "type": "string | boolean",
          "description": "Shell ID if inside a shell, false if outside"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal currentShell = Bridge.Shells.Inside()\nif currentShell then\n    print('Currently inside shell: ' .. currentShell)\n    Bridge.Framework.Notify('You are inside: ' .. currentShell, 'info')\nelse\n    print('Currently outside all shells')\nend"
    },
    {
      "name": "SetupInterior",
      "description": "Sets up all interior objects and interaction points for a shell.",
      "syntax": "Bridge.Shells.SetupInterior(shell)",
      "parameters": [
        {
          "name": "shell",
          "type": "table",
          "description": "Shell instance to set up interior for"
        }
      ],
      "returns": [],
      "example": "-- Internal function - called automatically during shell transitions\nlocal Bridge = exports['community_bridge']:Bridge()\nlocal shell = Bridge.Shells.All['apartment_1']\nBridge.Shells.SetupInterior(shell)"
    },
    {
      "name": "SetupExterior",
      "description": "Sets up all exterior objects and interaction points for a shell.",
      "syntax": "Bridge.Shells.SetupExterior(shell)",
      "parameters": [
        {
          "name": "shell",
          "type": "table",
          "description": "Shell instance to set up exterior for"
        }
      ],
      "returns": [],
      "example": "-- Internal function - called automatically during shell transitions\nlocal Bridge = exports['community_bridge']:Bridge()\nlocal shell = Bridge.Shells.All['apartment_1']\nBridge.Shells.SetupExterior(shell)"
    },
    {
      "name": "ClearInterior",
      "description": "Removes all interior entities and interaction points for a shell.",
      "syntax": "Bridge.Shells.ClearInterior(shell)",
      "parameters": [
        {
          "name": "shell",
          "type": "table",
          "description": "Shell instance to clear interior for"
        }
      ],
      "returns": [],
      "example": "-- Internal function - called automatically during shell transitions\nlocal Bridge = exports['community_bridge']:Bridge()\nlocal shell = Bridge.Shells.All['apartment_1']\nBridge.Shells.ClearInterior(shell)"
    },
    {
      "name": "ClearExterior",
      "description": "Removes all exterior entities and interaction points for a shell.",
      "syntax": "Bridge.Shells.ClearExterior(shell)",
      "parameters": [
        {
          "name": "shell",
          "type": "table",
          "description": "Shell instance to clear exterior for"
        }
      ],
      "returns": [],
      "example": "-- Internal function - called automatically during shell transitions\nlocal Bridge = exports['community_bridge']:Bridge()\nlocal shell = Bridge.Shells.All['apartment_1']\nBridge.Shells.ClearExterior(shell)"
    },
    {
      "name": "Event.Add",
      "description": "Adds an event callback for shell lifecycle events (OnSpawn, OnRemove).",
      "syntax": "Bridge.Shells.Event.Add(eventName, callback)",
      "parameters": [
        {
          "name": "eventName",
          "type": "string",
          "description": "Event name ('OnSpawn' or 'OnRemove')"
        },
        {
          "name": "callback",
          "type": "function",
          "description": "Callback function to execute on event"
        }
      ],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Add spawn event listener\nBridge.Shells.Event.Add('OnSpawn', function(objectData, entity)\n    print('Shell object spawned: ' .. objectData.id)\n    print('Entity handle: ' .. entity)\n    \n    -- Custom logic for spawned objects\n    if objectData.type == 'stash' then\n        print('Stash object is now available')\n    end\nend)\n\n-- Add remove event listener\nBridge.Shells.Event.Add('OnRemove', function(objectData, entity)\n    print('Shell object removed: ' .. objectData.id)\n    \n    -- Cleanup custom data\n    if objectData.type == 'stash' then\n        print('Stash object removed')\n    end\nend)"
    }
  ],
  "serverFunctions": [
    {
      "name": "New",
      "description": "Creates a new shell on the server with routing bucket management and interaction point configuration.",
      "syntax": "Bridge.Shells.New(data)",
      "parameters": [
        {
          "name": "data",
          "type": "table",
          "description": "Shell configuration with id, model, coords, interior/exterior objects, and bucket settings"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Created shell instance with bucket and interaction data"
        }
      ],
      "example": "-- Server-side shell creation\nlocal Bridge = exports['community_bridge']:Bridge()\n\nlocal shell = Bridge.Shells.New({\n    id = 'apartment_complex_1',\n    model = 'shell_apartment1',\n    coords = vector3(200, 300, 50),\n    bucket = 1001, -- Custom routing bucket\n    interior = {\n        {\n            type = 'exit',\n            id = 'main_exit',\n            offset = vector3(0, 0, 0)\n        },\n        {\n            type = 'stash',\n            id = 'personal_stash',\n            offset = vector3(2, 2, 0),\n            distance = 1.5\n        }\n    },\n    exterior = {\n        {\n            type = 'entrance',\n            id = 'main_entrance',\n            offset = vector3(0, 0, 0)\n        }\n    }\n})\n\nprint('Server shell created with bucket: ' .. shell.bucket)"
    },
    {
      "name": "Interactable.New",
      "description": "Creates a new interaction point configuration for shells with type, positioning, and metadata.",
      "syntax": "Bridge.Shells.Interactable.New(type, id, model, coords, rotation, entityType, distance, meta)",
      "parameters": [
        {
          "name": "type",
          "type": "string",
          "description": "Interaction type (entrance, exit, stash, etc.)"
        },
        {
          "name": "id",
          "type": "string",
          "description": "Unique identifier for the interaction"
        },
        {
          "name": "model",
          "type": "string | nil",
          "description": "Model to spawn for the interaction (optional)"
        },
        {
          "name": "coords",
          "type": "vector3",
          "description": "World coordinates for the interaction"
        },
        {
          "name": "rotation",
          "type": "vector3 | nil",
          "description": "Rotation vector (default: 0,0,0)"
        },
        {
          "name": "entityType",
          "type": "string | nil",
          "description": "Entity type (object, ped, vehicle - default: object)"
        },
        {
          "name": "distance",
          "type": "number | nil",
          "description": "Interaction distance (default: 2.0)"
        },
        {
          "name": "meta",
          "type": "table | nil",
          "description": "Additional metadata for the interaction"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Configured interaction object"
        }
      ],
      "example": "-- Server-side interaction creation\nlocal Bridge = exports['community_bridge']:Bridge()\n\nlocal doorInteraction = Bridge.Shells.Interactable.New(\n    'entrance',\n    'apartment_door',\n    'prop_door_01',\n    vector3(100, 200, 30),\n    vector3(0, 0, 90),\n    'object',\n    2.5,\n    {\n        requiresKey = true,\n        keyId = 'apartment_key_1'\n    }\n)\n\nprint('Door interaction created: ' .. doorInteraction.id)"
    }
  ],
  "sharedFunctions": []
}
