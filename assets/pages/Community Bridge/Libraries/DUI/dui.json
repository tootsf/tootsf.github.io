{
  "name": "DUI",
  "icon": "üñ•Ô∏è",
  "description": "The DUI (Direct User Interface) library provides HTML/CSS UI integration within FiveM with full mouse interaction support, texture rendering, and real-time message passing between browser and game. Currently in development/template stage.",
  "clientFunctions": [
    {
      "name": "Create",
      "description": "Creates a new DUI browser instance with specified URL and dimensions, returning a unique ID for management.",
      "syntax": "Bridge.DUI.Create(url, width, height)",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "description": "URL to load in the DUI browser"
        },
        {
          "name": "width",
          "type": "number | nil",
          "description": "Width of the DUI in pixels (default: 1280)"
        },
        {
          "name": "height",
          "type": "number | nil",
          "description": "Height of the DUI in pixels (default: 720)"
        }
      ],
      "returns": [
        {
          "type": "number | nil",
          "description": "DUI instance ID if successful, nil if failed"
        }
      ],
      "example": "-- NOTE: DUI library is currently commented out in source\n-- This documentation represents the intended API\n\nlocal Bridge = exports['community_bridge']:Bridge()\n\n-- Create a web-based UI\nlocal duiId = Bridge.DUI.Create('https://example.com/ui', 1920, 1080)\nif duiId then\n    print('DUI created with ID: ' .. duiId)\n    \n    -- Get textures for rendering\n    local txd, txn = Bridge.DUI.GetTextures(duiId)\n    print('Texture: ' .. txd .. '/' .. txn)\nelse\n    print('Failed to create DUI')\nend\n\n-- Create local HTML UI\nlocal localDui = Bridge.DUI.Create('file://ui/index.html', 800, 600)\nif localDui then\n    Bridge.DUI.TrackMouse(localDui, true, 1.0, 1.0)\nend"
    },
    {
      "name": "Destroy",
      "description": "Destroys a DUI instance and cleans up associated resources including textures and browser handles.",
      "syntax": "Bridge.DUI.Destroy(id)",
      "parameters": [
        {
          "name": "id",
          "type": "number",
          "description": "DUI instance ID to destroy"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if successfully destroyed, false if ID not found"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Clean up DUI when done\nlocal destroyed = Bridge.DUI.Destroy(duiId)\nif destroyed then\n    print('DUI destroyed successfully')\nelse\n    print('DUI not found or already destroyed')\nend\n\n-- Cleanup all DUIs on resource stop\nBridge.DUI.CleanupAll()"
    },
    {
      "name": "SetURL",
      "description": "Changes the URL of an existing DUI instance, loading new content without recreating the browser.",
      "syntax": "Bridge.DUI.SetURL(id, url)",
      "parameters": [
        {
          "name": "id",
          "type": "number",
          "description": "DUI instance ID"
        },
        {
          "name": "url",
          "type": "string",
          "description": "New URL to load"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if URL was set successfully"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Navigate to different pages\nBridge.DUI.SetURL(duiId, 'https://example.com/inventory')\nBridge.DUI.SetURL(duiId, 'https://example.com/settings')\n\n-- Load local content\nBridge.DUI.SetURL(duiId, 'file://ui/character.html')"
    },
    {
      "name": "SendMessage",
      "description": "Sends a JSON message from the game to the DUI browser for JavaScript handling.",
      "syntax": "Bridge.DUI.SendMessage(id, message)",
      "parameters": [
        {
          "name": "id",
          "type": "number",
          "description": "DUI instance ID"
        },
        {
          "name": "message",
          "type": "table",
          "description": "Message object (will be JSON encoded)"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if message was sent successfully"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Send player data to UI\nlocal playerData = {\n    type = 'updatePlayer',\n    data = {\n        name = 'John Doe',\n        money = 5000,\n        job = 'police'\n    }\n}\nBridge.DUI.SendMessage(duiId, playerData)\n\n-- Send inventory update\nlocal inventoryUpdate = {\n    type = 'inventory',\n    action = 'update',\n    items = Bridge.Framework.GetPlayerInventory()\n}\nBridge.DUI.SendMessage(duiId, inventoryUpdate)"
    },
    {
      "name": "Click",
      "description": "Simulates a mouse click at specified coordinates on the DUI interface.",
      "syntax": "Bridge.DUI.Click(id, x, y, button)",
      "parameters": [
        {
          "name": "id",
          "type": "number",
          "description": "DUI instance ID"
        },
        {
          "name": "x",
          "type": "number",
          "description": "X coordinate to click"
        },
        {
          "name": "y",
          "type": "number",
          "description": "Y coordinate to click"
        },
        {
          "name": "button",
          "type": "string | nil",
          "description": "Mouse button: 'left', 'middle', 'right' (default: 'left')"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if click was simulated successfully"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Click a button at specific coordinates\nBridge.DUI.Click(duiId, 400, 300, 'left')\n\n-- Right-click for context menu\nBridge.DUI.Click(duiId, 500, 200, 'right')\n\n-- Programmatic UI interaction\nlocal buttonPos = {x = 150, y = 50}\nBridge.DUI.Click(duiId, buttonPos.x, buttonPos.y)"
    },
    {
      "name": "TrackMouse",
      "description": "Enables or disables real-time mouse tracking for a DUI instance with coordinate scaling options.",
      "syntax": "Bridge.DUI.TrackMouse(id, enabled, scaleX, scaleY)",
      "parameters": [
        {
          "name": "id",
          "type": "number",
          "description": "DUI instance ID"
        },
        {
          "name": "enabled",
          "type": "boolean",
          "description": "Whether to enable mouse tracking"
        },
        {
          "name": "scaleX",
          "type": "number | nil",
          "description": "X coordinate scale factor (default: 1.0)"
        },
        {
          "name": "scaleY",
          "type": "number | nil",
          "description": "Y coordinate scale factor (default: 1.0)"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if tracking state was set successfully"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Enable mouse tracking with 1:1 scaling\nBridge.DUI.TrackMouse(duiId, true, 1.0, 1.0)\n\n-- Enable with custom scaling for high-DPI\nBridge.DUI.TrackMouse(duiId, true, 0.5, 0.5)\n\n-- Disable mouse tracking\nBridge.DUI.TrackMouse(duiId, false)"
    },
    {
      "name": "GetTextures",
      "description": "Retrieves the texture dictionary and name for rendering the DUI in-game.",
      "syntax": "Bridge.DUI.GetTextures(id)",
      "parameters": [
        {
          "name": "id",
          "type": "number",
          "description": "DUI instance ID"
        }
      ],
      "returns": [
        {
          "type": "string | nil",
          "description": "Texture dictionary name"
        },
        {
          "type": "string | nil",
          "description": "Texture name"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Get textures for rendering\nlocal txd, txn = Bridge.DUI.GetTextures(duiId)\nif txd and txn then\n    -- Render DUI on a surface (requires additional rendering code)\n    print('Render using: ' .. txd .. '/' .. txn)\nelse\n    print('DUI textures not available')\nend"
    },
    {
      "name": "Exists",
      "description": "Checks if a DUI instance exists and is active.",
      "syntax": "Bridge.DUI.Exists(id)",
      "parameters": [
        {
          "name": "id",
          "type": "number",
          "description": "DUI instance ID to check"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if instance exists and is active"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Check before operations\nif Bridge.DUI.Exists(duiId) then\n    Bridge.DUI.SendMessage(duiId, {type = 'update'})\nelse\n    print('DUI no longer exists')\nend"
    },
    {
      "name": "CleanupAll",
      "description": "Destroys all active DUI instances, useful for resource cleanup.",
      "syntax": "Bridge.DUI.CleanupAll()",
      "parameters": [],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Clean up all DUIs (automatically called on resource stop)\nBridge.DUI.CleanupAll()\nprint('All DUI instances destroyed')"
    }
  ],
  "serverFunctions": [],
  "sharedFunctions": []
}
