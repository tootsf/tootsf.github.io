{
  "name": "Point",
  "icon": "📍",
  "description": "The Point system provides an efficient grid-based spatial management system for tracking player proximity to locations and entities. It uses spatial partitioning for optimized performance and supports both static coordinate points and dynamic entity tracking with enter/exit callbacks.",
  "clientFunctions": [
    {
      "name": "Register",
      "description": "Creates a new point that tracks player proximity with enter/exit callbacks. Supports both static coordinates and dynamic entities.",
      "syntax": "Bridge.Point.Register(id, target, distance, args, onEnter, onExit, onNearby)",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "description": "Unique identifier for the point"
        },
        {
          "name": "target",
          "type": "number | vector3",
          "description": "Entity handle for dynamic tracking or vector3 for static position"
        },
        {
          "name": "distance",
          "type": "number",
          "description": "Trigger distance for enter/exit events"
        },
        {
          "name": "args",
          "type": "any",
          "description": "Custom data to pass to callback functions"
        },
        {
          "name": "onEnter",
          "type": "function",
          "description": "Callback when player enters the point (point, data) -> updatedData"
        },
        {
          "name": "onExit",
          "type": "function",
          "description": "Callback when player exits the point (point, data) -> updatedData"
        },
        {
          "name": "onNearby",
          "type": "function | nil",
          "description": "Optional callback for nearby points processing"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Point object reference"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Static coordinate point\nlocal shopPoint = Bridge.Point.Register(\n    'shop_entrance',\n    vector3(100, 200, 20),\n    5.0,\n    {shopName = 'General Store'},\n    function(point, data)\n        print('Entered ' .. data.shopName)\n        Bridge.Framework.ShowHelpText('Press [E] to shop')\n        return data\n    end,\n    function(point, data)\n        print('Left ' .. data.shopName)\n        Bridge.Framework.HideHelpText()\n        return data\n    end\n)\n\n-- Dynamic entity tracking\nlocal vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nlocal vehiclePoint = Bridge.Point.Register(\n    'my_vehicle',\n    vehicle,\n    3.0,\n    {plate = GetVehicleNumberPlateText(vehicle)},\n    function(point, data)\n        print('Near vehicle: ' .. data.plate)\n        return data\n    end,\n    function(point, data)\n        print('Away from vehicle: ' .. data.plate)\n        return data\n    end\n)"
    },
    {
      "name": "Remove",
      "description": "Removes a point by its ID and cleans up associated resources.",
      "syntax": "Bridge.Point.Remove(id)",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "description": "ID of the point to remove"
        }
      ],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Remove a specific point\nBridge.Point.Remove('shop_entrance')\nprint('Shop entrance point removed')"
    },
    {
      "name": "Get",
      "description": "Retrieves a point object by its ID.",
      "syntax": "Bridge.Point.Get(id)",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "description": "ID of the point to retrieve"
        }
      ],
      "returns": [
        {
          "type": "table | nil",
          "description": "Point object or nil if not found"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal point = Bridge.Point.Get('shop_entrance')\nif point then\n    print('Point distance: ' .. point.distance)\n    print('Point inside: ' .. tostring(point.inside))\nelse\n    print('Point not found')\nend"
    },
    {
      "name": "UpdateCoords",
      "description": "Updates the coordinates of an existing point and refreshes its grid position.",
      "syntax": "Bridge.Point.UpdateCoords(id, coords)",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "description": "ID of the point to update"
        },
        {
          "name": "coords",
          "type": "vector3",
          "description": "New coordinates for the point"
        }
      ],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Move a point to new location\nlocal newLocation = vector3(150, 250, 25)\nBridge.Point.UpdateCoords('shop_entrance', newLocation)\nprint('Point moved to new location')"
    },
    {
      "name": "GetAll",
      "description": "Returns all active points in the system.",
      "syntax": "Bridge.Point.GetAll()",
      "parameters": [],
      "returns": [
        {
          "type": "table",
          "description": "Table of all active points indexed by ID"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal allPoints = Bridge.Point.GetAll()\nprint('Total active points: ' .. table.getn(allPoints))\n\nfor id, point in pairs(allPoints) do\n    print('Point ID: ' .. id .. ', Inside: ' .. tostring(point.inside))\nend"
    },
    {
      "name": "GetNearbyCells",
      "description": "Returns grid cell keys that are near the specified coordinates. Used internally for spatial optimization.",
      "syntax": "Bridge.Point.GetNearbyCells(coords)",
      "parameters": [
        {
          "name": "coords",
          "type": "vector3",
          "description": "Coordinates to find nearby cells for"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Array of nearby grid cell keys"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Get nearby grid cells for optimization\nlocal playerCoords = GetEntityCoords(PlayerPedId())\nlocal nearbyCells = Bridge.Point.GetNearbyCells(playerCoords)\nprint('Nearby cells: ' .. #nearbyCells)"
    },
    {
      "name": "CheckPointsInSameCell",
      "description": "Returns all points in the same grid cell as the specified point for proximity checking.",
      "syntax": "Bridge.Point.CheckPointsInSameCell(point)",
      "parameters": [
        {
          "name": "point",
          "type": "table",
          "description": "Point object to check against"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Table of nearby points in the same cell"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal myPoint = Bridge.Point.Get('shop_entrance')\nif myPoint then\n    local nearbyPoints = Bridge.Point.CheckPointsInSameCell(myPoint)\n    print('Points in same cell: ' .. table.getn(nearbyPoints))\nend"
    }
  ],
  "serverFunctions": [],
  "sharedFunctions": []
}
