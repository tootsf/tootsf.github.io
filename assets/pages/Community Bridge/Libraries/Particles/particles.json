{
  "name": "Particles",
  "icon": "âœ¨",
  "description": "The Particles library provides comprehensive particle effect management with automatic asset loading, proximity-based spawning, and support for various particle types including looped, non-looped, entity-attached, and bone-attached effects.",
  "clientFunctions": [
    {
      "name": "Play",
      "description": "Creates a particle effect at the specified position with full control over appearance and behavior. Automatically handles asset loading and cleanup.",
      "syntax": "Bridge.Particles.Play(dict, ptfx, pos, rot, scale, color, looped, loopLength)",
      "parameters": [
        {
          "name": "dict",
          "type": "string",
          "description": "Particle effect dictionary name"
        },
        {
          "name": "ptfx",
          "type": "string",
          "description": "Particle effect name within the dictionary"
        },
        {
          "name": "pos",
          "type": "vector3",
          "description": "Position coordinates for the particle effect"
        },
        {
          "name": "rot",
          "type": "vector3",
          "description": "Rotation angles (x, y, z) for the particle effect"
        },
        {
          "name": "scale",
          "type": "number",
          "description": "Scale multiplier for the particle effect size"
        },
        {
          "name": "color",
          "type": "vector3",
          "description": "RGB color values (0-255) for the particle effect"
        },
        {
          "name": "looped",
          "type": "boolean",
          "description": "Whether the particle effect should loop continuously"
        },
        {
          "name": "loopLength",
          "type": "number | nil",
          "description": "Duration in milliseconds for looped effects (nil for infinite)"
        }
      ],
      "returns": [
        {
          "type": "number | nil",
          "description": "Particle effect handle or nil if creation failed"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Create explosion effect\nlocal explosionHandle = Bridge.Particles.Play(\n    \"core\",\n    \"exp_grd_bzgas_smoke\",\n    vector3(100.0, 200.0, 30.0),\n    vector3(0.0, 0.0, 0.0),\n    2.0,\n    vector3(255, 100, 100),\n    false,\n    nil\n)\n\n-- Create looped fire effect for 10 seconds\nlocal fireHandle = Bridge.Particles.Play(\n    \"core\",\n    \"fire_wrecked_plane_cockpit\",\n    GetEntityCoords(PlayerPedId()),\n    vector3(0.0, 0.0, 0.0),\n    1.5,\n    vector3(255, 255, 255),\n    true,\n    10000\n)"
    },
    {
      "name": "Stop",
      "description": "Stops and removes a particle effect using its handle.",
      "syntax": "Bridge.Particles.Stop(handle)",
      "parameters": [
        {
          "name": "handle",
          "type": "number",
          "description": "Particle effect handle returned from Play function"
        }
      ],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Create a particle effect\nlocal smokeHandle = Bridge.Particles.Play(\n    \"core\", \"exp_grd_bzgas_smoke\", \n    GetEntityCoords(PlayerPedId()), \n    vector3(0,0,0), 1.0, vector3(255,255,255), true\n)\n\n-- Stop it after 5 seconds\nSetTimeout(5000, function()\n    Bridge.Particles.Stop(smokeHandle)\n    print(\"Smoke effect stopped\")\nend)"
    },
    {
      "name": "Register",
      "description": "Registers a proximity-based particle effect that automatically spawns/despawns based on player distance. Integrates with the Points system for efficient management.",
      "syntax": "Bridge.Particles.Register(data)",
      "parameters": [
        {
          "name": "data",
          "type": "table",
          "description": "Configuration table with particle properties"
        }
      ],
      "returns": [
        {
          "type": "string",
          "description": "Unique ID for the registered particle effect"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Register a campfire effect that spawns when players get close\nlocal campfireId = Bridge.Particles.Register({\n    dict = \"core\",\n    ptfx = \"fire_wrecked_plane_cockpit\",\n    position = vector3(100.0, 200.0, 30.0),\n    rotation = vector3(0.0, 0.0, 0.0),\n    size = 1.0,\n    color = vector3(255, 150, 50),\n    looped = true,\n    drawDistance = 25.0\n})\n\nprint(\"Campfire registered with ID: \" .. campfireId)"
    },
    {
      "name": "Remove",
      "description": "Removes a registered particle effect and cleans up all associated resources.",
      "syntax": "Bridge.Particles.Remove(id)",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "description": "ID of the registered particle effect to remove"
        }
      ],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Remove the campfire effect\nBridge.Particles.Remove(campfireId)\nprint(\"Campfire particle effect removed\")"
    },
    {
      "name": "CreateOnEntity",
      "description": "Creates a particle effect attached to an entity with offset positioning and automatic cleanup.",
      "syntax": "Bridge.Particles.CreateOnEntity(dict, ptfx, entity, offset, rot, scale, color, looped, loopLength)",
      "parameters": [
        {
          "name": "dict",
          "type": "string",
          "description": "Particle effect dictionary name"
        },
        {
          "name": "ptfx",
          "type": "string",
          "description": "Particle effect name"
        },
        {
          "name": "entity",
          "type": "number",
          "description": "Entity handle to attach the effect to"
        },
        {
          "name": "offset",
          "type": "vector3",
          "description": "Offset position relative to entity"
        },
        {
          "name": "rot",
          "type": "vector3",
          "description": "Rotation angles for the effect"
        },
        {
          "name": "scale",
          "type": "number",
          "description": "Scale multiplier"
        },
        {
          "name": "color",
          "type": "vector3",
          "description": "RGB color values"
        },
        {
          "name": "looped",
          "type": "boolean",
          "description": "Whether to loop the effect"
        },
        {
          "name": "loopLength",
          "type": "number | nil",
          "description": "Loop duration in milliseconds"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "Particle effect handle"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Add smoke to player's vehicle exhaust\nlocal vehicle = GetVehiclePedIsIn(PlayerPedId(), false)\nif vehicle ~= 0 then\n    local smokeHandle = Bridge.Particles.CreateOnEntity(\n        \"core\",\n        \"exp_grd_bzgas_smoke\",\n        vehicle,\n        vector3(0.0, -2.0, 0.0), -- Behind the vehicle\n        vector3(0.0, 0.0, 0.0),\n        0.5,\n        vector3(200, 200, 200),\n        true,\n        5000\n    )\nend"
    },
    {
      "name": "CreateOnEntityBone",
      "description": "Creates a particle effect attached to a specific bone of an entity for precise positioning.",
      "syntax": "Bridge.Particles.CreateOnEntityBone(dict, ptfx, entity, bone, offset, rot, scale, color, looped, loopLength)",
      "parameters": [
        {
          "name": "dict",
          "type": "string",
          "description": "Particle effect dictionary name"
        },
        {
          "name": "ptfx",
          "type": "string",
          "description": "Particle effect name"
        },
        {
          "name": "entity",
          "type": "number",
          "description": "Entity handle"
        },
        {
          "name": "bone",
          "type": "number",
          "description": "Bone index to attach to"
        },
        {
          "name": "offset",
          "type": "vector3",
          "description": "Offset from bone position"
        },
        {
          "name": "rot",
          "type": "vector3",
          "description": "Rotation angles"
        },
        {
          "name": "scale",
          "type": "number",
          "description": "Scale multiplier"
        },
        {
          "name": "color",
          "type": "vector3",
          "description": "RGB color values"
        },
        {
          "name": "looped",
          "type": "boolean",
          "description": "Whether to loop the effect"
        },
        {
          "name": "loopLength",
          "type": "number | nil",
          "description": "Loop duration in milliseconds"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "Particle effect handle"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Add spark effect to player's hand\nlocal playerPed = PlayerPedId()\nlocal handBone = GetPedBoneIndex(playerPed, 57005) -- Right hand\n\nlocal sparkHandle = Bridge.Particles.CreateOnEntityBone(\n    \"core\",\n    \"sp_welding_sparks\",\n    playerPed,\n    handBone,\n    vector3(0.1, 0.0, 0.0),\n    vector3(0.0, 0.0, 0.0),\n    0.3,\n    vector3(255, 255, 100),\n    true,\n    3000\n)"
    }
  ],
  "serverFunctions": [],
  "sharedFunctions": []
}
