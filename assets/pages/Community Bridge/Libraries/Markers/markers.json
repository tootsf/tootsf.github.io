{
  "name": "Markers",
  "icon": "ðŸ“Œ",
  "description": "The Markers library provides efficient 3D marker management with proximity-based rendering. It integrates with the Points system to automatically show/hide markers based on player distance, supporting various marker types, colors, animations, and custom textures.",
  "clientFunctions": [
    {
      "name": "Create",
      "description": "Creates a 3D marker with comprehensive customization options. The marker automatically renders when players are within draw distance and supports various visual effects.",
      "syntax": "Bridge.Markers.Create(data)",
      "parameters": [
        {
          "name": "data",
          "type": "table",
          "description": "Configuration table with marker properties"
        }
      ],
      "returns": [
        {
          "type": "string | nil",
          "description": "Unique marker ID or nil if creation failed"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Create a basic green cylinder marker\nlocal shopMarkerId = Bridge.Markers.Create({\n    position = vector3(25.7, -1347.3, 29.5),\n    marker = 1, -- Cylinder marker\n    size = vector3(2.0, 2.0, 1.0),\n    color = vector3(0, 255, 0), -- Green\n    alpha = 150,\n    bobUpAndDown = true,\n    drawDistance = 50.0\n})\n\n-- Create a custom textured marker\nlocal customMarkerId = Bridge.Markers.Create({\n    position = vector3(100.0, 200.0, 30.0),\n    offset = vector3(0.0, 0.0, 1.0),\n    rotation = vector3(0.0, 0.0, 45.0),\n    marker = 9, -- Cone marker\n    size = vector3(1.5, 1.5, 2.0),\n    color = vector3(255, 100, 100), -- Red\n    alpha = 200,\n    rotate = true,\n    textureDict = \"custom_markers\",\n    textureName = \"warning_cone\"\n})"
    },
    {
      "name": "Remove",
      "description": "Removes a specific marker by its ID and cleans up all associated resources.",
      "syntax": "Bridge.Markers.Remove(id)",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "description": "ID of the marker to remove"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if marker was successfully removed, false if not found"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Remove the shop marker\nlocal success = Bridge.Markers.Remove(shopMarkerId)\nif success then\n    print(\"Shop marker removed successfully\")\nelse\n    print(\"Failed to remove shop marker - not found\")\nend"
    },
    {
      "name": "RemoveAll",
      "description": "Removes all active markers and cleans up all associated resources. Useful for cleanup operations or scene resets.",
      "syntax": "Bridge.Markers.RemoveAll()",
      "parameters": [],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Clean up all markers when leaving an area\nBridge.Markers.RemoveAll()\nprint(\"All markers have been removed\")\n\n-- Commonly used in resource cleanup\nAddEventHandler('onResourceStop', function(resource)\n    if resource == GetCurrentResourceName() then\n        Bridge.Markers.RemoveAll()\n    end\nend)"
    }
  ],
  "serverFunctions": [],
  "sharedFunctions": []
}
