{
  "name": "Anim",
  "icon": "ðŸŽ­",
  "description": "The Anim library provides a comprehensive animation management system for entities in FiveM. It handles animation dictionary loading, playback control, and automatic cleanup with support for callbacks and status tracking.",
  "clientFunctions": [
    {
      "name": "RequestDict",
      "description": "Requests and loads an animation dictionary with timeout handling.",
      "syntax": "Bridge.Anim.RequestDict(animDict)",
      "parameters": [
        {
          "name": "animDict",
          "type": "string",
          "description": "The animation dictionary name to load"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if dictionary was loaded successfully, false otherwise"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal success = Bridge.Anim.RequestDict(\"mp_player_intdrink\")\nif success then\n    print(\"Animation dictionary loaded successfully\")\nelse\n    print(\"Failed to load animation dictionary\")\nend"
    },
    {
      "name": "Start",
      "description": "Starts the animation update loop that manages all active animations. This is called automatically when playing animations.",
      "syntax": "Bridge.Anim.Start()",
      "parameters": [],
      "returns": [],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Usually called automatically, but can be called manually\nBridge.Anim.Start()\nprint(\"Animation update loop started\")"
    },
    {
      "name": "Play",
      "description": "Plays an animation on the specified entity with comprehensive control options and callback support.",
      "syntax": "Bridge.Anim.Play(id, entity, animDict, animName, blendIn, blendOut, duration, flag, playbackRate, onComplete)",
      "parameters": [
        {
          "name": "id",
          "type": "string | nil",
          "description": "Unique identifier for the animation (auto-generated if nil)"
        },
        {
          "name": "entity",
          "type": "number",
          "description": "The entity handle to play the animation on"
        },
        {
          "name": "animDict",
          "type": "string",
          "description": "The animation dictionary name"
        },
        {
          "name": "animName",
          "type": "string",
          "description": "The animation name within the dictionary"
        },
        {
          "name": "blendIn",
          "type": "number | nil",
          "description": "Blend in speed (default: 8.0)"
        },
        {
          "name": "blendOut",
          "type": "number | nil",
          "description": "Blend out speed (default: -8.0)"
        },
        {
          "name": "duration",
          "type": "number | nil",
          "description": "Animation duration in milliseconds (-1 for natural length, default: -1)"
        },
        {
          "name": "flag",
          "type": "number | nil",
          "description": "Animation flags (default: 1)"
        },
        {
          "name": "playbackRate",
          "type": "number | nil",
          "description": "Animation playback rate (default: 0.0)"
        },
        {
          "name": "onComplete",
          "type": "function | nil",
          "description": "Callback function called when animation completes with (success, reason)"
        }
      ],
      "returns": [
        {
          "type": "string | nil",
          "description": "Animation ID if successful, nil if failed"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal playerId = PlayerId()\nlocal playerPed = GetPlayerPed(playerId)\n\nlocal animId = Bridge.Anim.Play(\n    \"drink_animation\",\n    playerPed,\n    \"mp_player_intdrink\",\n    \"loop_bottle\",\n    8.0,\n    -8.0,\n    5000,\n    49,\n    0.0,\n    function(success, reason)\n        if success then\n            print(\"Animation completed successfully\")\n        else\n            print(\"Animation failed: \" .. reason)\n        end\n    end\n)\n\nprint(\"Playing animation with ID: \" .. tostring(animId))"
    },
    {
      "name": "Stop",
      "description": "Stops an active animation by its ID and triggers the completion callback with stopped status.",
      "syntax": "Bridge.Anim.Stop(id)",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "description": "The animation ID to stop"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if animation was stopped successfully, false if ID not found"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Play an animation and store the ID\nlocal animId = Bridge.Anim.Play(nil, GetPlayerPed(PlayerId()), \"mp_player_intdrink\", \"loop_bottle\")\n\n-- Stop the animation after 3 seconds\nSetTimeout(3000, function()\n    local stopped = Bridge.Anim.Stop(animId)\n    if stopped then\n        print(\"Animation stopped successfully\")\n    else\n        print(\"Failed to stop animation - ID not found\")\n    end\nend)"
    }
  ],
  "serverFunctions": [],
  "sharedFunctions": []
}
