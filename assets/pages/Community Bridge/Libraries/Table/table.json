{
  "name": "Table",
  "icon": "ðŸ“Š",
  "description": "The Table utility library provides comprehensive table manipulation functions including deep cloning, searching, comparison, and data transformation operations. Essential for data processing and state management throughout the system.",
  "clientFunctions": [],
  "serverFunctions": [],
  "sharedFunctions": [
    {
      "name": "CheckPopulated",
      "description": "Checks if a table contains any data, handling both array-style and key-value tables.",
      "syntax": "Bridge.Table.CheckPopulated(tbl)",
      "parameters": [
        {
          "name": "tbl",
          "type": "table",
          "description": "Table to check for data"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if table contains data, false if empty"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal emptyArray = {}\nlocal emptyTable = {}\nlocal populatedTable = {key = 'value'}\n\nprint(Bridge.Table.CheckPopulated(emptyArray)) -- false\nprint(Bridge.Table.CheckPopulated(populatedTable)) -- true"
    },
    {
      "name": "DeepClone",
      "description": "Creates a deep copy of a table, recursively cloning nested tables with optional omission of specific keys.",
      "syntax": "Bridge.Table.DeepClone(tbl, out, omit)",
      "parameters": [
        {
          "name": "tbl",
          "type": "table",
          "description": "Table to clone"
        },
        {
          "name": "out",
          "type": "table | nil",
          "description": "Optional existing table to clone into"
        },
        {
          "name": "omit",
          "type": "table | nil",
          "description": "Table of keys to omit from cloning"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Deep cloned table"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal original = {\n    name = 'Player',\n    stats = { health = 100, armor = 50 },\n    password = 'secret'\n}\n\nlocal clone = Bridge.Table.DeepClone(original, nil, {password = true})\nprint(clone.name) -- 'Player'\nprint(clone.stats.health) -- 100\nprint(clone.password) -- nil (omitted)"
    },
    {
      "name": "TableContains",
      "description": "Searches for a value in a table with optional nested searching.",
      "syntax": "Bridge.Table.TableContains(tbl, search, nested)",
      "parameters": [
        {
          "name": "tbl",
          "type": "table",
          "description": "Table to search in"
        },
        {
          "name": "search",
          "type": "any",
          "description": "Value to search for"
        },
        {
          "name": "nested",
          "type": "boolean | nil",
          "description": "Whether to search recursively in nested tables"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if value is found"
        },
        {
          "type": "any",
          "description": "The found value"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal data = {'apple', 'banana', {fruit = 'orange'}}\n\nlocal found, value = Bridge.Table.TableContains(data, 'apple')\nprint(found) -- true\n\nlocal foundNested = Bridge.Table.TableContains(data, 'orange', true)\nprint(foundNested) -- true"
    },
    {
      "name": "TableContainsKey",
      "description": "Checks if a table contains a specific key.",
      "syntax": "Bridge.Table.TableContainsKey(tbl, search)",
      "parameters": [
        {
          "name": "tbl",
          "type": "table",
          "description": "Table to search in"
        },
        {
          "name": "search",
          "type": "any",
          "description": "Key to search for"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if key exists"
        },
        {
          "type": "any",
          "description": "The found key"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal player = {name = 'John', health = 100}\n\nlocal hasKey, key = Bridge.Table.TableContainsKey(player, 'name')\nprint(hasKey) -- true\nprint(key) -- 'name'"
    },
    {
      "name": "TableGetKeys",
      "description": "Returns an array of all keys in a table.",
      "syntax": "Bridge.Table.TableGetKeys(tbl)",
      "parameters": [
        {
          "name": "tbl",
          "type": "table",
          "description": "Table to get keys from"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Array of table keys"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal player = {name = 'John', health = 100, level = 5}\nlocal keys = Bridge.Table.TableGetKeys(player)\n-- keys = {'name', 'health', 'level'}"
    },
    {
      "name": "GetClosest",
      "description": "Finds the closest object to given coordinates from a table of objects with .coords property.",
      "syntax": "Bridge.Table.GetClosest(coords, tbl)",
      "parameters": [
        {
          "name": "coords",
          "type": "vector3",
          "description": "Reference coordinates"
        },
        {
          "name": "tbl",
          "type": "table",
          "description": "Table of objects with .coords property"
        }
      ],
      "returns": [
        {
          "type": "table | nil",
          "description": "Closest object or nil if none found"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal playerCoords = GetEntityCoords(PlayerPedId())\nlocal shops = {\n    {name = 'Shop A', coords = vector3(100, 100, 20)},\n    {name = 'Shop B', coords = vector3(200, 200, 20)}\n}\n\nlocal closest = Bridge.Table.GetClosest(playerCoords, shops)\nprint('Closest shop: ' .. closest.name)"
    },
    {
      "name": "FindFirstUnoccupiedSlot",
      "description": "Finds the first available slot number in a table of items with .slot property.",
      "syntax": "Bridge.Table.FindFirstUnoccupiedSlot(tbl)",
      "parameters": [
        {
          "name": "tbl",
          "type": "table",
          "description": "Table of items with .slot property"
        }
      ],
      "returns": [
        {
          "type": "number | nil",
          "description": "First available slot number or nil if all slots occupied"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal inventory = {\n    {item = 'bread', slot = 1},\n    {item = 'water', slot = 3}\n}\n\nlocal availableSlot = Bridge.Table.FindFirstUnoccupiedSlot(inventory)\nprint('Available slot: ' .. availableSlot) -- 2"
    },
    {
      "name": "Append",
      "description": "Appends all values from the second table to the first table.",
      "syntax": "Bridge.Table.Append(tbl1, tbl2)",
      "parameters": [
        {
          "name": "tbl1",
          "type": "table",
          "description": "Target table to append to"
        },
        {
          "name": "tbl2",
          "type": "table",
          "description": "Source table to append from"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "The modified first table"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal list1 = {'apple', 'banana'}\nlocal list2 = {'cherry', 'date'}\n\nBridge.Table.Append(list1, list2)\n-- list1 = {'apple', 'banana', 'cherry', 'date'}"
    },
    {
      "name": "Split",
      "description": "Splits a table into two parts at the specified size.",
      "syntax": "Bridge.Table.Split(tbl, size)",
      "parameters": [
        {
          "name": "tbl",
          "type": "table",
          "description": "Table to split"
        },
        {
          "name": "size",
          "type": "number | nil",
          "description": "Split point (defaults to middle of table)"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "First part of the split"
        },
        {
          "type": "table",
          "description": "Second part of the split"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal numbers = {1, 2, 3, 4, 5, 6}\nlocal first, second = Bridge.Table.Split(numbers, 3)\n-- first = {1, 2, 3}\n-- second = {4, 5, 6}"
    },
    {
      "name": "Shuffle",
      "description": "Randomly shuffles the elements of a table using Fisher-Yates algorithm.",
      "syntax": "Bridge.Table.Shuffle(tbl)",
      "parameters": [
        {
          "name": "tbl",
          "type": "table",
          "description": "Table to shuffle"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "The shuffled table (same reference)"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal deck = {'A', 'K', 'Q', 'J'}\nBridge.Table.Shuffle(deck)\nprint('Shuffled deck: ' .. table.concat(deck, ', '))"
    },
    {
      "name": "Compare",
      "description": "Performs deep comparison between two values, recursively comparing nested tables.",
      "syntax": "Bridge.Table.Compare(a, b)",
      "parameters": [
        {
          "name": "a",
          "type": "any",
          "description": "First value to compare"
        },
        {
          "name": "b",
          "type": "any",
          "description": "Second value to compare"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if values are deeply equal"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal table1 = {name = 'John', stats = {health = 100}}\nlocal table2 = {name = 'John', stats = {health = 100}}\nlocal table3 = {name = 'Jane', stats = {health = 100}}\n\nprint(Bridge.Table.Compare(table1, table2)) -- true\nprint(Bridge.Table.Compare(table1, table3)) -- false"
    }
  ]
}
