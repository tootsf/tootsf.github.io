{
  "name": "Inventory",
  "icon": "ðŸŽ’",
  "description": "The Inventory module provides a unified interface for handling player inventory items across different inventory systems. It supports various inventory systems like ox_inventory, qb-inventory, ps-inventory, and more.",
  "clientFunctions": [
    {
      "name": "GetImagePath",
      "description": "Gets the image path for a specific item, with fallback to a default placeholder if not found.",
      "syntax": "Bridge.Inventory.GetImagePath(item)",
      "parameters": [
        {
          "name": "item",
          "type": "string",
          "description": "Name of the item"
        }
      ],
      "returns": [
        {
          "type": "string",
          "description": "Path to the item's image or default placeholder if not found"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal imagePath = Bridge.Inventory.GetImagePath(\"lockpick\")\nprint(\"Lockpick image: \" .. imagePath)"
    },
    {
      "name": "GetItemCount",
      "description": "Returns the count of a specific item in the player's inventory.",
      "syntax": "Bridge.Inventory.GetItemCount(item)",
      "parameters": [
        {
          "name": "item",
          "type": "string",
          "description": "Name of the item"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "Count of the item (0 if not found)"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal waterCount = Bridge.Inventory.GetItemCount(\"water\")\nprint(\"Player has \" .. waterCount .. \" water bottles\")"
    },
    {
      "name": "GetItemInfo",
      "description": "Gets detailed information about a specific item from the inventory system.",
      "syntax": "Bridge.Inventory.GetItemInfo(item)",
      "parameters": [
        {
          "name": "item",
          "type": "string",
          "description": "Name of the item"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Table containing item information: {name, label, stack, weight, description, image}"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal itemInfo = Bridge.Inventory.GetItemInfo(\"phone\")\nif itemInfo then\n    print(\"Item label: \" .. itemInfo.label)\n    print(\"Item weight: \" .. itemInfo.weight)\nend"
    },
    {
      "name": "HasItem",
      "description": "Checks if the player has a specific item in their inventory.",
      "syntax": "Bridge.Inventory.HasItem(item)",
      "parameters": [
        {
          "name": "item",
          "type": "string",
          "description": "Name of the item"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if the player has the item, false otherwise"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nif Bridge.Inventory.HasItem(\"lockpick\") then\n    print(\"Player has a lockpick\")\nelse\n    print(\"Player doesn't have a lockpick\")\nend"
    },
    {
      "name": "GetPlayerInventory",
      "description": "Returns the player's entire inventory in a standardized format.",
      "syntax": "Bridge.Inventory.GetPlayerInventory()",
      "parameters": [],
      "returns": [
        {
          "type": "table",
          "description": "Array of inventory items: {name, label, count, slot, metadata}"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal inventory = Bridge.Inventory.GetPlayerInventory()\nfor i, item in pairs(inventory) do\n    print(item.label .. \" x\" .. item.count)\nend"
    },
    {
      "name": "OpenShop",
      "description": "Opens a shop interface for the player.",
      "syntax": "Bridge.Inventory.OpenShop(shopId)",
      "parameters": [
        {
          "name": "shopId",
          "type": "string",
          "description": "Unique identifier for the shop"
        }
      ],
      "returns": [
        {
          "type": "nil",
          "description": "No return value"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nBridge.Inventory.OpenShop(\"general_store\")"
    },
    {
      "name": "OpenStash",
      "description": "Opens a stash interface for the player.",
      "syntax": "Bridge.Inventory.OpenStash(stashId)",
      "parameters": [
        {
          "name": "stashId",
          "type": "string",
          "description": "Unique identifier for the stash"
        }
      ],
      "returns": [
        {
          "type": "nil",
          "description": "No return value"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nBridge.Inventory.OpenStash(\"police_evidence\")"
    },
    {
      "name": "StripPNG",
      "description": "Removes the .png extension from an item name if present.",
      "syntax": "Bridge.Inventory.StripPNG(item)",
      "parameters": [
        {
          "name": "item",
          "type": "string",
          "description": "Item name that may contain .png extension"
        }
      ],
      "returns": [
        {
          "type": "string",
          "description": "Item name without .png extension"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal cleanName = Bridge.Inventory.StripPNG(\"phone.png\")\nprint(cleanName) -- outputs: phone"
    }
  ],
  "serverFunctions": [
    {
      "name": "AddItem",
      "description": "Adds an item to a player's inventory with optional metadata.",
      "syntax": "Bridge.Inventory.AddItem(src, item, count, slot, metadata)",
      "parameters": [
        {
          "name": "src",
          "type": "number",
          "description": "Player server ID"
        },
        {
          "name": "item",
          "type": "string",
          "description": "Name of the item"
        },
        {
          "name": "count",
          "type": "number",
          "description": "Amount to add"
        },
        {
          "name": "slot",
          "type": "number",
          "optional": true,
          "description": "Specific slot to add to"
        },
        {
          "name": "metadata",
          "type": "table",
          "optional": true,
          "description": "Additional item metadata"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Success status of operation"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Add 1 phone with metadata\nlocal success = Bridge.Inventory.AddItem(source, \"phone\", 1, nil, { number = \"555-123-4567\" })\nif success then\n    print(\"Added phone to inventory\")\nelse\n    print(\"Failed to add phone\")\nend"
    },
    {
      "name": "RemoveItem",
      "description": "Removes an item from a player's inventory.",
      "syntax": "Bridge.Inventory.RemoveItem(src, item, count, slot, metadata)",
      "parameters": [
        {
          "name": "src",
          "type": "number",
          "description": "Player server ID"
        },
        {
          "name": "item",
          "type": "string",
          "description": "Name of the item"
        },
        {
          "name": "count",
          "type": "number",
          "description": "Amount to remove"
        },
        {
          "name": "slot",
          "type": "number",
          "optional": true,
          "description": "Specific slot to remove from"
        },
        {
          "name": "metadata",
          "type": "table",
          "optional": true,
          "description": "Specific item metadata to match"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Success status of operation"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Remove 2 water bottles\nlocal success = Bridge.Inventory.RemoveItem(source, \"water\", 2)\nif success then\n    print(\"Removed water from inventory\")\nelse\n    print(\"Failed to remove water\")\nend"
    },
    {
      "name": "GetItemCount",
      "description": "Gets the count of an item in a player's inventory, with optional metadata matching.",
      "syntax": "Bridge.Inventory.GetItemCount(src, item, metadata)",
      "parameters": [
        {
          "name": "src",
          "type": "number",
          "description": "Player server ID"
        },
        {
          "name": "item",
          "type": "string",
          "description": "Name of the item"
        },
        {
          "name": "metadata",
          "type": "table",
          "optional": true,
          "description": "Specific item metadata to match"
        }
      ],
      "returns": [
        {
          "type": "number",
          "description": "Count of the specified item"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\n-- Get count of lockpicks\nlocal count = Bridge.Inventory.GetItemCount(source, \"lockpick\")\nprint(\"Player has \" .. count .. \" lockpicks\")"
    },
    {
      "name": "AddTrunkItems",
      "description": "Adds multiple items to a vehicle trunk inventory.",
      "syntax": "Bridge.Inventory.AddTrunkItems(identifier, items)",
      "parameters": [
        {
          "name": "identifier",
          "type": "string",
          "description": "Vehicle plate or unique identifier"
        },
        {
          "name": "items",
          "type": "table",
          "description": "Array of items to add: {item, count, metadata}"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Success status of operation"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal items = {\n    {item = \"water\", count = 5},\n    {item = \"bread\", count = 3}\n}\nlocal success = Bridge.Inventory.AddTrunkItems(\"ABC123\", items)"
    },
    {
      "name": "AddItemsToTrunk",
      "description": "Alternative method to add items to a vehicle trunk.",
      "syntax": "Bridge.Inventory.AddItemsToTrunk(identifier, items)",
      "parameters": [
        {
          "name": "identifier",
          "type": "string",
          "description": "Vehicle identifier"
        },
        {
          "name": "items",
          "type": "table",
          "description": "Items to add to trunk"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Success status"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nBridge.Inventory.AddItemsToTrunk(vehicleId, itemsArray)"
    },
    {
      "name": "CanCarryItem",
      "description": "Checks if a player can carry additional items without exceeding weight limits.",
      "syntax": "Bridge.Inventory.CanCarryItem(src, item, count)",
      "parameters": [
        {
          "name": "src",
          "type": "number",
          "description": "Player server ID"
        },
        {
          "name": "item",
          "type": "string",
          "description": "Name of the item"
        },
        {
          "name": "count",
          "type": "number",
          "description": "Amount to check"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if player can carry the items"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nif Bridge.Inventory.CanCarryItem(source, \"gold_bar\", 5) then\n    print(\"Player can carry 5 gold bars\")\nelse\n    print(\"Player cannot carry that much weight\")\nend"
    },
    {
      "name": "ClearStash",
      "description": "Clears all items from a specific stash inventory.",
      "syntax": "Bridge.Inventory.ClearStash(id, type)",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "description": "Stash identifier"
        },
        {
          "name": "type",
          "type": "string",
          "description": "Type of stash"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Success status"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nBridge.Inventory.ClearStash(\"evidence_locker\", \"stash\")"
    },
    {
      "name": "GetImagePath",
      "description": "Server-side function to get item image path.",
      "syntax": "Bridge.Inventory.GetImagePath(item)",
      "parameters": [
        {
          "name": "item",
          "type": "string",
          "description": "Item name"
        }
      ],
      "returns": [
        {
          "type": "string",
          "description": "Image path for the item"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal imagePath = Bridge.Inventory.GetImagePath(\"lockpick\")"
    },
    {
      "name": "GetItem",
      "description": "Gets a specific item from player inventory by name.",
      "syntax": "Bridge.Inventory.GetItem(src, item)",
      "parameters": [
        {
          "name": "src",
          "type": "number",
          "description": "Player server ID"
        },
        {
          "name": "item",
          "type": "string",
          "description": "Item name"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Item data or nil if not found"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal item = Bridge.Inventory.GetItem(source, \"phone\")"
    },
    {
      "name": "GetItemBySlot",
      "description": "Gets an item from a specific inventory slot.",
      "syntax": "Bridge.Inventory.GetItemBySlot(src, slot)",
      "parameters": [
        {
          "name": "src",
          "type": "number",
          "description": "Player server ID"
        },
        {
          "name": "slot",
          "type": "number",
          "description": "Inventory slot number"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Item data or nil if slot is empty"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal item = Bridge.Inventory.GetItemBySlot(source, 1)"
    },
    {
      "name": "GetItemInfo",
      "description": "Server-side function to get detailed item information.",
      "syntax": "Bridge.Inventory.GetItemInfo(item)",
      "parameters": [
        {
          "name": "item",
          "type": "string",
          "description": "Item name"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Item information table"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal itemInfo = Bridge.Inventory.GetItemInfo(\"lockpick\")"
    },
    {
      "name": "GetPlayerInventory",
      "description": "Server-side function to get a player's complete inventory.",
      "syntax": "Bridge.Inventory.GetPlayerInventory(src)",
      "parameters": [
        {
          "name": "src",
          "type": "number",
          "description": "Player server ID"
        }
      ],
      "returns": [
        {
          "type": "table",
          "description": "Player's inventory data"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal inventory = Bridge.Inventory.GetPlayerInventory(source)"
    },
    {
      "name": "HasItem",
      "description": "Server-side function to check if a player has a specific item.",
      "syntax": "Bridge.Inventory.HasItem(src, item)",
      "parameters": [
        {
          "name": "src",
          "type": "number",
          "description": "Player server ID"
        },
        {
          "name": "item",
          "type": "string",
          "description": "Item name"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "True if player has the item"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nif Bridge.Inventory.HasItem(source, \"lockpick\") then\n    print(\"Player has a lockpick\")\nend"
    },
    {
      "name": "OpenShop",
      "description": "Server-side function to open a shop for a player.",
      "syntax": "Bridge.Inventory.OpenShop(src, shopId)",
      "parameters": [
        {
          "name": "src",
          "type": "number",
          "description": "Player server ID"
        },
        {
          "name": "shopId",
          "type": "string",
          "description": "Shop identifier"
        }
      ],
      "returns": [
        {
          "type": "nil",
          "description": "No return value"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nBridge.Inventory.OpenShop(source, \"general_store\")"
    },
    {
      "name": "OpenStash",
      "description": "Server-side function to open a stash for a player.",
      "syntax": "Bridge.Inventory.OpenStash(src, stashId)",
      "parameters": [
        {
          "name": "src",
          "type": "number",
          "description": "Player server ID"
        },
        {
          "name": "stashId",
          "type": "string",
          "description": "Stash identifier"
        }
      ],
      "returns": [
        {
          "type": "nil",
          "description": "No return value"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nBridge.Inventory.OpenStash(source, \"police_evidence\")"
    },
    {
      "name": "RegisterShop",
      "description": "Registers a new shop with the inventory system.",
      "syntax": "Bridge.Inventory.RegisterShop(shopData)",
      "parameters": [
        {
          "name": "shopData",
          "type": "table",
          "description": "Shop configuration data"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Success status"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal shopData = {\n    name = \"General Store\",\n    items = {{item = \"water\", price = 10}}\n}\nBridge.Inventory.RegisterShop(shopData)"
    },
    {
      "name": "RegisterStash",
      "description": "Registers a new stash inventory.",
      "syntax": "Bridge.Inventory.RegisterStash(id, label, slots, weight, owner, jobs, gangs)",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "description": "Unique stash identifier"
        },
        {
          "name": "label",
          "type": "string",
          "description": "Display name for the stash"
        },
        {
          "name": "slots",
          "type": "number",
          "description": "Number of inventory slots"
        },
        {
          "name": "weight",
          "type": "number",
          "description": "Maximum weight capacity"
        },
        {
          "name": "owner",
          "type": "string",
          "optional": true,
          "description": "Owner identifier"
        },
        {
          "name": "jobs",
          "type": "table",
          "optional": true,
          "description": "Allowed jobs"
        },
        {
          "name": "gangs",
          "type": "table",
          "optional": true,
          "description": "Allowed gangs"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Success status"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nBridge.Inventory.RegisterStash(\"police_evidence\", \"Evidence Locker\", 50, 100000, nil, {\"police\"}, nil)"
    },
    {
      "name": "SetMetadata",
      "description": "Sets metadata for a specific item in player inventory.",
      "syntax": "Bridge.Inventory.SetMetadata(src, slot, metadata)",
      "parameters": [
        {
          "name": "src",
          "type": "number",
          "description": "Player server ID"
        },
        {
          "name": "slot",
          "type": "number",
          "description": "Inventory slot"
        },
        {
          "name": "metadata",
          "type": "table",
          "description": "Metadata to set"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Success status"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nBridge.Inventory.SetMetadata(source, 1, {durability = 50})"
    },
    {
      "name": "StripPNG",
      "description": "Server-side function to remove .png extension from item names.",
      "syntax": "Bridge.Inventory.StripPNG(item)",
      "parameters": [
        {
          "name": "item",
          "type": "string",
          "description": "Item name"
        }
      ],
      "returns": [
        {
          "type": "string",
          "description": "Item name without extension"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nlocal cleanName = Bridge.Inventory.StripPNG(\"phone.png\")"
    },
    {
      "name": "UpdatePlate",
      "description": "Updates the plate identifier for a vehicle trunk inventory.",
      "syntax": "Bridge.Inventory.UpdatePlate(oldPlate, newPlate)",
      "parameters": [
        {
          "name": "oldPlate",
          "type": "string",
          "description": "Current plate number"
        },
        {
          "name": "newPlate",
          "type": "string",
          "description": "New plate number"
        }
      ],
      "returns": [
        {
          "type": "boolean",
          "description": "Success status"
        }
      ],
      "example": "local Bridge = exports['community_bridge']:Bridge()\n\nBridge.Inventory.UpdatePlate(\"ABC123\", \"XYZ789\")"
    }
  ],
  "sharedFunctions": []
}
